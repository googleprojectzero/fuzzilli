// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: program.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is autogenerated. Please check the README.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Fuzzilli_Protobuf_Instruction: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The operation is either encoded as an index, referring to the nth operation
  /// (so that shared operations are also only present once in the protobuf), or
  /// as one of the many concrete Operation messages.
  public var inouts: [UInt32] = []

  public var operation: Fuzzilli_Protobuf_Instruction.OneOf_Operation? = nil

  public var opIdx: UInt32 {
    get {
      if case .opIdx(let v)? = operation {return v}
      return 0
    }
    set {operation = .opIdx(newValue)}
  }

  public var nop: Fuzzilli_Protobuf_Nop {
    get {
      if case .nop(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Nop()
    }
    set {operation = .nop(newValue)}
  }

  public var loadInteger: Fuzzilli_Protobuf_LoadInteger {
    get {
      if case .loadInteger(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadInteger()
    }
    set {operation = .loadInteger(newValue)}
  }

  public var loadBigInt: Fuzzilli_Protobuf_LoadBigInt {
    get {
      if case .loadBigInt(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadBigInt()
    }
    set {operation = .loadBigInt(newValue)}
  }

  public var loadFloat: Fuzzilli_Protobuf_LoadFloat {
    get {
      if case .loadFloat(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadFloat()
    }
    set {operation = .loadFloat(newValue)}
  }

  public var loadString: Fuzzilli_Protobuf_LoadString {
    get {
      if case .loadString(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadString()
    }
    set {operation = .loadString(newValue)}
  }

  public var loadBoolean: Fuzzilli_Protobuf_LoadBoolean {
    get {
      if case .loadBoolean(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadBoolean()
    }
    set {operation = .loadBoolean(newValue)}
  }

  public var loadUndefined: Fuzzilli_Protobuf_LoadUndefined {
    get {
      if case .loadUndefined(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadUndefined()
    }
    set {operation = .loadUndefined(newValue)}
  }

  public var loadNull: Fuzzilli_Protobuf_LoadNull {
    get {
      if case .loadNull(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadNull()
    }
    set {operation = .loadNull(newValue)}
  }

  public var loadThis: Fuzzilli_Protobuf_LoadThis {
    get {
      if case .loadThis(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadThis()
    }
    set {operation = .loadThis(newValue)}
  }

  public var loadArguments: Fuzzilli_Protobuf_LoadArguments {
    get {
      if case .loadArguments(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadArguments()
    }
    set {operation = .loadArguments(newValue)}
  }

  public var loadRegExp: Fuzzilli_Protobuf_LoadRegExp {
    get {
      if case .loadRegExp(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadRegExp()
    }
    set {operation = .loadRegExp(newValue)}
  }

  public var beginObjectLiteral: Fuzzilli_Protobuf_BeginObjectLiteral {
    get {
      if case .beginObjectLiteral(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginObjectLiteral()
    }
    set {operation = .beginObjectLiteral(newValue)}
  }

  public var objectLiteralAddProperty: Fuzzilli_Protobuf_ObjectLiteralAddProperty {
    get {
      if case .objectLiteralAddProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ObjectLiteralAddProperty()
    }
    set {operation = .objectLiteralAddProperty(newValue)}
  }

  public var objectLiteralAddElement: Fuzzilli_Protobuf_ObjectLiteralAddElement {
    get {
      if case .objectLiteralAddElement(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ObjectLiteralAddElement()
    }
    set {operation = .objectLiteralAddElement(newValue)}
  }

  public var objectLiteralAddComputedProperty: Fuzzilli_Protobuf_ObjectLiteralAddComputedProperty {
    get {
      if case .objectLiteralAddComputedProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ObjectLiteralAddComputedProperty()
    }
    set {operation = .objectLiteralAddComputedProperty(newValue)}
  }

  public var objectLiteralCopyProperties: Fuzzilli_Protobuf_ObjectLiteralCopyProperties {
    get {
      if case .objectLiteralCopyProperties(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ObjectLiteralCopyProperties()
    }
    set {operation = .objectLiteralCopyProperties(newValue)}
  }

  public var objectLiteralSetPrototype: Fuzzilli_Protobuf_ObjectLiteralSetPrototype {
    get {
      if case .objectLiteralSetPrototype(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ObjectLiteralSetPrototype()
    }
    set {operation = .objectLiteralSetPrototype(newValue)}
  }

  public var beginObjectLiteralMethod: Fuzzilli_Protobuf_BeginObjectLiteralMethod {
    get {
      if case .beginObjectLiteralMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginObjectLiteralMethod()
    }
    set {operation = .beginObjectLiteralMethod(newValue)}
  }

  public var endObjectLiteralMethod: Fuzzilli_Protobuf_EndObjectLiteralMethod {
    get {
      if case .endObjectLiteralMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndObjectLiteralMethod()
    }
    set {operation = .endObjectLiteralMethod(newValue)}
  }

  public var beginObjectLiteralComputedMethod: Fuzzilli_Protobuf_BeginObjectLiteralComputedMethod {
    get {
      if case .beginObjectLiteralComputedMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginObjectLiteralComputedMethod()
    }
    set {operation = .beginObjectLiteralComputedMethod(newValue)}
  }

  public var endObjectLiteralComputedMethod: Fuzzilli_Protobuf_EndObjectLiteralComputedMethod {
    get {
      if case .endObjectLiteralComputedMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndObjectLiteralComputedMethod()
    }
    set {operation = .endObjectLiteralComputedMethod(newValue)}
  }

  public var beginObjectLiteralGetter: Fuzzilli_Protobuf_BeginObjectLiteralGetter {
    get {
      if case .beginObjectLiteralGetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginObjectLiteralGetter()
    }
    set {operation = .beginObjectLiteralGetter(newValue)}
  }

  public var endObjectLiteralGetter: Fuzzilli_Protobuf_EndObjectLiteralGetter {
    get {
      if case .endObjectLiteralGetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndObjectLiteralGetter()
    }
    set {operation = .endObjectLiteralGetter(newValue)}
  }

  public var beginObjectLiteralSetter: Fuzzilli_Protobuf_BeginObjectLiteralSetter {
    get {
      if case .beginObjectLiteralSetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginObjectLiteralSetter()
    }
    set {operation = .beginObjectLiteralSetter(newValue)}
  }

  public var endObjectLiteralSetter: Fuzzilli_Protobuf_EndObjectLiteralSetter {
    get {
      if case .endObjectLiteralSetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndObjectLiteralSetter()
    }
    set {operation = .endObjectLiteralSetter(newValue)}
  }

  public var endObjectLiteral: Fuzzilli_Protobuf_EndObjectLiteral {
    get {
      if case .endObjectLiteral(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndObjectLiteral()
    }
    set {operation = .endObjectLiteral(newValue)}
  }

  public var beginClassDefinition: Fuzzilli_Protobuf_BeginClassDefinition {
    get {
      if case .beginClassDefinition(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassDefinition()
    }
    set {operation = .beginClassDefinition(newValue)}
  }

  public var beginClassConstructor: Fuzzilli_Protobuf_BeginClassConstructor {
    get {
      if case .beginClassConstructor(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassConstructor()
    }
    set {operation = .beginClassConstructor(newValue)}
  }

  public var endClassConstructor: Fuzzilli_Protobuf_EndClassConstructor {
    get {
      if case .endClassConstructor(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassConstructor()
    }
    set {operation = .endClassConstructor(newValue)}
  }

  public var classAddInstanceProperty: Fuzzilli_Protobuf_ClassAddInstanceProperty {
    get {
      if case .classAddInstanceProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ClassAddInstanceProperty()
    }
    set {operation = .classAddInstanceProperty(newValue)}
  }

  public var classAddInstanceElement: Fuzzilli_Protobuf_ClassAddInstanceElement {
    get {
      if case .classAddInstanceElement(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ClassAddInstanceElement()
    }
    set {operation = .classAddInstanceElement(newValue)}
  }

  public var classAddInstanceComputedProperty: Fuzzilli_Protobuf_ClassAddInstanceComputedProperty {
    get {
      if case .classAddInstanceComputedProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ClassAddInstanceComputedProperty()
    }
    set {operation = .classAddInstanceComputedProperty(newValue)}
  }

  public var beginClassInstanceMethod: Fuzzilli_Protobuf_BeginClassInstanceMethod {
    get {
      if case .beginClassInstanceMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassInstanceMethod()
    }
    set {operation = .beginClassInstanceMethod(newValue)}
  }

  public var endClassInstanceMethod: Fuzzilli_Protobuf_EndClassInstanceMethod {
    get {
      if case .endClassInstanceMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassInstanceMethod()
    }
    set {operation = .endClassInstanceMethod(newValue)}
  }

  public var beginClassInstanceGetter: Fuzzilli_Protobuf_BeginClassInstanceGetter {
    get {
      if case .beginClassInstanceGetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassInstanceGetter()
    }
    set {operation = .beginClassInstanceGetter(newValue)}
  }

  public var endClassInstanceGetter: Fuzzilli_Protobuf_EndClassInstanceGetter {
    get {
      if case .endClassInstanceGetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassInstanceGetter()
    }
    set {operation = .endClassInstanceGetter(newValue)}
  }

  public var beginClassInstanceSetter: Fuzzilli_Protobuf_BeginClassInstanceSetter {
    get {
      if case .beginClassInstanceSetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassInstanceSetter()
    }
    set {operation = .beginClassInstanceSetter(newValue)}
  }

  public var endClassInstanceSetter: Fuzzilli_Protobuf_EndClassInstanceSetter {
    get {
      if case .endClassInstanceSetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassInstanceSetter()
    }
    set {operation = .endClassInstanceSetter(newValue)}
  }

  public var classAddStaticProperty: Fuzzilli_Protobuf_ClassAddStaticProperty {
    get {
      if case .classAddStaticProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ClassAddStaticProperty()
    }
    set {operation = .classAddStaticProperty(newValue)}
  }

  public var classAddStaticElement: Fuzzilli_Protobuf_ClassAddStaticElement {
    get {
      if case .classAddStaticElement(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ClassAddStaticElement()
    }
    set {operation = .classAddStaticElement(newValue)}
  }

  public var classAddStaticComputedProperty: Fuzzilli_Protobuf_ClassAddStaticComputedProperty {
    get {
      if case .classAddStaticComputedProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ClassAddStaticComputedProperty()
    }
    set {operation = .classAddStaticComputedProperty(newValue)}
  }

  public var beginClassStaticInitializer: Fuzzilli_Protobuf_BeginClassStaticInitializer {
    get {
      if case .beginClassStaticInitializer(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassStaticInitializer()
    }
    set {operation = .beginClassStaticInitializer(newValue)}
  }

  public var endClassStaticInitializer: Fuzzilli_Protobuf_EndClassStaticInitializer {
    get {
      if case .endClassStaticInitializer(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassStaticInitializer()
    }
    set {operation = .endClassStaticInitializer(newValue)}
  }

  public var beginClassStaticMethod: Fuzzilli_Protobuf_BeginClassStaticMethod {
    get {
      if case .beginClassStaticMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassStaticMethod()
    }
    set {operation = .beginClassStaticMethod(newValue)}
  }

  public var endClassStaticMethod: Fuzzilli_Protobuf_EndClassStaticMethod {
    get {
      if case .endClassStaticMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassStaticMethod()
    }
    set {operation = .endClassStaticMethod(newValue)}
  }

  public var beginClassStaticGetter: Fuzzilli_Protobuf_BeginClassStaticGetter {
    get {
      if case .beginClassStaticGetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassStaticGetter()
    }
    set {operation = .beginClassStaticGetter(newValue)}
  }

  public var endClassStaticGetter: Fuzzilli_Protobuf_EndClassStaticGetter {
    get {
      if case .endClassStaticGetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassStaticGetter()
    }
    set {operation = .endClassStaticGetter(newValue)}
  }

  public var beginClassStaticSetter: Fuzzilli_Protobuf_BeginClassStaticSetter {
    get {
      if case .beginClassStaticSetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassStaticSetter()
    }
    set {operation = .beginClassStaticSetter(newValue)}
  }

  public var endClassStaticSetter: Fuzzilli_Protobuf_EndClassStaticSetter {
    get {
      if case .endClassStaticSetter(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassStaticSetter()
    }
    set {operation = .endClassStaticSetter(newValue)}
  }

  public var classAddPrivateInstanceProperty: Fuzzilli_Protobuf_ClassAddPrivateInstanceProperty {
    get {
      if case .classAddPrivateInstanceProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ClassAddPrivateInstanceProperty()
    }
    set {operation = .classAddPrivateInstanceProperty(newValue)}
  }

  public var beginClassPrivateInstanceMethod: Fuzzilli_Protobuf_BeginClassPrivateInstanceMethod {
    get {
      if case .beginClassPrivateInstanceMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassPrivateInstanceMethod()
    }
    set {operation = .beginClassPrivateInstanceMethod(newValue)}
  }

  public var endClassPrivateInstanceMethod: Fuzzilli_Protobuf_EndClassPrivateInstanceMethod {
    get {
      if case .endClassPrivateInstanceMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassPrivateInstanceMethod()
    }
    set {operation = .endClassPrivateInstanceMethod(newValue)}
  }

  public var classAddPrivateStaticProperty: Fuzzilli_Protobuf_ClassAddPrivateStaticProperty {
    get {
      if case .classAddPrivateStaticProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ClassAddPrivateStaticProperty()
    }
    set {operation = .classAddPrivateStaticProperty(newValue)}
  }

  public var beginClassPrivateStaticMethod: Fuzzilli_Protobuf_BeginClassPrivateStaticMethod {
    get {
      if case .beginClassPrivateStaticMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginClassPrivateStaticMethod()
    }
    set {operation = .beginClassPrivateStaticMethod(newValue)}
  }

  public var endClassPrivateStaticMethod: Fuzzilli_Protobuf_EndClassPrivateStaticMethod {
    get {
      if case .endClassPrivateStaticMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassPrivateStaticMethod()
    }
    set {operation = .endClassPrivateStaticMethod(newValue)}
  }

  public var endClassDefinition: Fuzzilli_Protobuf_EndClassDefinition {
    get {
      if case .endClassDefinition(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndClassDefinition()
    }
    set {operation = .endClassDefinition(newValue)}
  }

  public var createArray: Fuzzilli_Protobuf_CreateArray {
    get {
      if case .createArray(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CreateArray()
    }
    set {operation = .createArray(newValue)}
  }

  public var createIntArray: Fuzzilli_Protobuf_CreateIntArray {
    get {
      if case .createIntArray(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CreateIntArray()
    }
    set {operation = .createIntArray(newValue)}
  }

  public var createFloatArray: Fuzzilli_Protobuf_CreateFloatArray {
    get {
      if case .createFloatArray(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CreateFloatArray()
    }
    set {operation = .createFloatArray(newValue)}
  }

  public var createArrayWithSpread: Fuzzilli_Protobuf_CreateArrayWithSpread {
    get {
      if case .createArrayWithSpread(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CreateArrayWithSpread()
    }
    set {operation = .createArrayWithSpread(newValue)}
  }

  public var createTemplateString: Fuzzilli_Protobuf_CreateTemplateString {
    get {
      if case .createTemplateString(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CreateTemplateString()
    }
    set {operation = .createTemplateString(newValue)}
  }

  public var loadBuiltin: Fuzzilli_Protobuf_LoadBuiltin {
    get {
      if case .loadBuiltin(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadBuiltin()
    }
    set {operation = .loadBuiltin(newValue)}
  }

  public var getProperty: Fuzzilli_Protobuf_GetProperty {
    get {
      if case .getProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_GetProperty()
    }
    set {operation = .getProperty(newValue)}
  }

  public var setProperty: Fuzzilli_Protobuf_SetProperty {
    get {
      if case .setProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_SetProperty()
    }
    set {operation = .setProperty(newValue)}
  }

  public var updateProperty: Fuzzilli_Protobuf_UpdateProperty {
    get {
      if case .updateProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_UpdateProperty()
    }
    set {operation = .updateProperty(newValue)}
  }

  public var deleteProperty: Fuzzilli_Protobuf_DeleteProperty {
    get {
      if case .deleteProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_DeleteProperty()
    }
    set {operation = .deleteProperty(newValue)}
  }

  public var configureProperty: Fuzzilli_Protobuf_ConfigureProperty {
    get {
      if case .configureProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ConfigureProperty()
    }
    set {operation = .configureProperty(newValue)}
  }

  public var getElement: Fuzzilli_Protobuf_GetElement {
    get {
      if case .getElement(let v)? = operation {return v}
      return Fuzzilli_Protobuf_GetElement()
    }
    set {operation = .getElement(newValue)}
  }

  public var setElement: Fuzzilli_Protobuf_SetElement {
    get {
      if case .setElement(let v)? = operation {return v}
      return Fuzzilli_Protobuf_SetElement()
    }
    set {operation = .setElement(newValue)}
  }

  public var updateElement: Fuzzilli_Protobuf_UpdateElement {
    get {
      if case .updateElement(let v)? = operation {return v}
      return Fuzzilli_Protobuf_UpdateElement()
    }
    set {operation = .updateElement(newValue)}
  }

  public var deleteElement: Fuzzilli_Protobuf_DeleteElement {
    get {
      if case .deleteElement(let v)? = operation {return v}
      return Fuzzilli_Protobuf_DeleteElement()
    }
    set {operation = .deleteElement(newValue)}
  }

  public var configureElement: Fuzzilli_Protobuf_ConfigureElement {
    get {
      if case .configureElement(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ConfigureElement()
    }
    set {operation = .configureElement(newValue)}
  }

  public var getComputedProperty: Fuzzilli_Protobuf_GetComputedProperty {
    get {
      if case .getComputedProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_GetComputedProperty()
    }
    set {operation = .getComputedProperty(newValue)}
  }

  public var setComputedProperty: Fuzzilli_Protobuf_SetComputedProperty {
    get {
      if case .setComputedProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_SetComputedProperty()
    }
    set {operation = .setComputedProperty(newValue)}
  }

  public var updateComputedProperty: Fuzzilli_Protobuf_UpdateComputedProperty {
    get {
      if case .updateComputedProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_UpdateComputedProperty()
    }
    set {operation = .updateComputedProperty(newValue)}
  }

  public var deleteComputedProperty: Fuzzilli_Protobuf_DeleteComputedProperty {
    get {
      if case .deleteComputedProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_DeleteComputedProperty()
    }
    set {operation = .deleteComputedProperty(newValue)}
  }

  public var configureComputedProperty: Fuzzilli_Protobuf_ConfigureComputedProperty {
    get {
      if case .configureComputedProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ConfigureComputedProperty()
    }
    set {operation = .configureComputedProperty(newValue)}
  }

  public var typeOf: Fuzzilli_Protobuf_TypeOf {
    get {
      if case .typeOf(let v)? = operation {return v}
      return Fuzzilli_Protobuf_TypeOf()
    }
    set {operation = .typeOf(newValue)}
  }

  public var void: Fuzzilli_Protobuf_Void {
    get {
      if case .void(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Void()
    }
    set {operation = .void(newValue)}
  }

  public var testInstanceOf: Fuzzilli_Protobuf_TestInstanceOf {
    get {
      if case .testInstanceOf(let v)? = operation {return v}
      return Fuzzilli_Protobuf_TestInstanceOf()
    }
    set {operation = .testInstanceOf(newValue)}
  }

  public var testIn: Fuzzilli_Protobuf_TestIn {
    get {
      if case .testIn(let v)? = operation {return v}
      return Fuzzilli_Protobuf_TestIn()
    }
    set {operation = .testIn(newValue)}
  }

  public var beginPlainFunction: Fuzzilli_Protobuf_BeginPlainFunction {
    get {
      if case .beginPlainFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginPlainFunction()
    }
    set {operation = .beginPlainFunction(newValue)}
  }

  public var endPlainFunction: Fuzzilli_Protobuf_EndPlainFunction {
    get {
      if case .endPlainFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndPlainFunction()
    }
    set {operation = .endPlainFunction(newValue)}
  }

  public var beginArrowFunction: Fuzzilli_Protobuf_BeginArrowFunction {
    get {
      if case .beginArrowFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginArrowFunction()
    }
    set {operation = .beginArrowFunction(newValue)}
  }

  public var endArrowFunction: Fuzzilli_Protobuf_EndArrowFunction {
    get {
      if case .endArrowFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndArrowFunction()
    }
    set {operation = .endArrowFunction(newValue)}
  }

  public var beginGeneratorFunction: Fuzzilli_Protobuf_BeginGeneratorFunction {
    get {
      if case .beginGeneratorFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginGeneratorFunction()
    }
    set {operation = .beginGeneratorFunction(newValue)}
  }

  public var endGeneratorFunction: Fuzzilli_Protobuf_EndGeneratorFunction {
    get {
      if case .endGeneratorFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndGeneratorFunction()
    }
    set {operation = .endGeneratorFunction(newValue)}
  }

  public var beginAsyncFunction: Fuzzilli_Protobuf_BeginAsyncFunction {
    get {
      if case .beginAsyncFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginAsyncFunction()
    }
    set {operation = .beginAsyncFunction(newValue)}
  }

  public var endAsyncFunction: Fuzzilli_Protobuf_EndAsyncFunction {
    get {
      if case .endAsyncFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndAsyncFunction()
    }
    set {operation = .endAsyncFunction(newValue)}
  }

  public var beginAsyncArrowFunction: Fuzzilli_Protobuf_BeginAsyncArrowFunction {
    get {
      if case .beginAsyncArrowFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginAsyncArrowFunction()
    }
    set {operation = .beginAsyncArrowFunction(newValue)}
  }

  public var endAsyncArrowFunction: Fuzzilli_Protobuf_EndAsyncArrowFunction {
    get {
      if case .endAsyncArrowFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndAsyncArrowFunction()
    }
    set {operation = .endAsyncArrowFunction(newValue)}
  }

  public var beginAsyncGeneratorFunction: Fuzzilli_Protobuf_BeginAsyncGeneratorFunction {
    get {
      if case .beginAsyncGeneratorFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginAsyncGeneratorFunction()
    }
    set {operation = .beginAsyncGeneratorFunction(newValue)}
  }

  public var endAsyncGeneratorFunction: Fuzzilli_Protobuf_EndAsyncGeneratorFunction {
    get {
      if case .endAsyncGeneratorFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndAsyncGeneratorFunction()
    }
    set {operation = .endAsyncGeneratorFunction(newValue)}
  }

  public var beginConstructor: Fuzzilli_Protobuf_BeginConstructor {
    get {
      if case .beginConstructor(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginConstructor()
    }
    set {operation = .beginConstructor(newValue)}
  }

  public var endConstructor: Fuzzilli_Protobuf_EndConstructor {
    get {
      if case .endConstructor(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndConstructor()
    }
    set {operation = .endConstructor(newValue)}
  }

  public var `return`: Fuzzilli_Protobuf_Return {
    get {
      if case .return(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Return()
    }
    set {operation = .return(newValue)}
  }

  public var yield: Fuzzilli_Protobuf_Yield {
    get {
      if case .yield(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Yield()
    }
    set {operation = .yield(newValue)}
  }

  public var yieldEach: Fuzzilli_Protobuf_YieldEach {
    get {
      if case .yieldEach(let v)? = operation {return v}
      return Fuzzilli_Protobuf_YieldEach()
    }
    set {operation = .yieldEach(newValue)}
  }

  public var await: Fuzzilli_Protobuf_Await {
    get {
      if case .await(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Await()
    }
    set {operation = .await(newValue)}
  }

  public var callFunction: Fuzzilli_Protobuf_CallFunction {
    get {
      if case .callFunction(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CallFunction()
    }
    set {operation = .callFunction(newValue)}
  }

  public var callFunctionWithSpread: Fuzzilli_Protobuf_CallFunctionWithSpread {
    get {
      if case .callFunctionWithSpread(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CallFunctionWithSpread()
    }
    set {operation = .callFunctionWithSpread(newValue)}
  }

  public var construct: Fuzzilli_Protobuf_Construct {
    get {
      if case .construct(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Construct()
    }
    set {operation = .construct(newValue)}
  }

  public var constructWithSpread: Fuzzilli_Protobuf_ConstructWithSpread {
    get {
      if case .constructWithSpread(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ConstructWithSpread()
    }
    set {operation = .constructWithSpread(newValue)}
  }

  public var callMethod: Fuzzilli_Protobuf_CallMethod {
    get {
      if case .callMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CallMethod()
    }
    set {operation = .callMethod(newValue)}
  }

  public var callMethodWithSpread: Fuzzilli_Protobuf_CallMethodWithSpread {
    get {
      if case .callMethodWithSpread(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CallMethodWithSpread()
    }
    set {operation = .callMethodWithSpread(newValue)}
  }

  public var callComputedMethod: Fuzzilli_Protobuf_CallComputedMethod {
    get {
      if case .callComputedMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CallComputedMethod()
    }
    set {operation = .callComputedMethod(newValue)}
  }

  public var callComputedMethodWithSpread: Fuzzilli_Protobuf_CallComputedMethodWithSpread {
    get {
      if case .callComputedMethodWithSpread(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CallComputedMethodWithSpread()
    }
    set {operation = .callComputedMethodWithSpread(newValue)}
  }

  public var unaryOperation: Fuzzilli_Protobuf_UnaryOperation {
    get {
      if case .unaryOperation(let v)? = operation {return v}
      return Fuzzilli_Protobuf_UnaryOperation()
    }
    set {operation = .unaryOperation(newValue)}
  }

  public var binaryOperation: Fuzzilli_Protobuf_BinaryOperation {
    get {
      if case .binaryOperation(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BinaryOperation()
    }
    set {operation = .binaryOperation(newValue)}
  }

  public var ternaryOperation: Fuzzilli_Protobuf_TernaryOperation {
    get {
      if case .ternaryOperation(let v)? = operation {return v}
      return Fuzzilli_Protobuf_TernaryOperation()
    }
    set {operation = .ternaryOperation(newValue)}
  }

  public var update: Fuzzilli_Protobuf_Update {
    get {
      if case .update(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Update()
    }
    set {operation = .update(newValue)}
  }

  public var dup: Fuzzilli_Protobuf_Dup {
    get {
      if case .dup(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Dup()
    }
    set {operation = .dup(newValue)}
  }

  public var reassign: Fuzzilli_Protobuf_Reassign {
    get {
      if case .reassign(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Reassign()
    }
    set {operation = .reassign(newValue)}
  }

  public var destructArray: Fuzzilli_Protobuf_DestructArray {
    get {
      if case .destructArray(let v)? = operation {return v}
      return Fuzzilli_Protobuf_DestructArray()
    }
    set {operation = .destructArray(newValue)}
  }

  public var destructArrayAndReassign: Fuzzilli_Protobuf_DestructArrayAndReassign {
    get {
      if case .destructArrayAndReassign(let v)? = operation {return v}
      return Fuzzilli_Protobuf_DestructArrayAndReassign()
    }
    set {operation = .destructArrayAndReassign(newValue)}
  }

  public var destructObject: Fuzzilli_Protobuf_DestructObject {
    get {
      if case .destructObject(let v)? = operation {return v}
      return Fuzzilli_Protobuf_DestructObject()
    }
    set {operation = .destructObject(newValue)}
  }

  public var destructObjectAndReassign: Fuzzilli_Protobuf_DestructObjectAndReassign {
    get {
      if case .destructObjectAndReassign(let v)? = operation {return v}
      return Fuzzilli_Protobuf_DestructObjectAndReassign()
    }
    set {operation = .destructObjectAndReassign(newValue)}
  }

  public var compare: Fuzzilli_Protobuf_Compare {
    get {
      if case .compare(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Compare()
    }
    set {operation = .compare(newValue)}
  }

  public var loadNamedVariable: Fuzzilli_Protobuf_LoadNamedVariable {
    get {
      if case .loadNamedVariable(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadNamedVariable()
    }
    set {operation = .loadNamedVariable(newValue)}
  }

  public var storeNamedVariable: Fuzzilli_Protobuf_StoreNamedVariable {
    get {
      if case .storeNamedVariable(let v)? = operation {return v}
      return Fuzzilli_Protobuf_StoreNamedVariable()
    }
    set {operation = .storeNamedVariable(newValue)}
  }

  public var defineNamedVariable: Fuzzilli_Protobuf_DefineNamedVariable {
    get {
      if case .defineNamedVariable(let v)? = operation {return v}
      return Fuzzilli_Protobuf_DefineNamedVariable()
    }
    set {operation = .defineNamedVariable(newValue)}
  }

  public var eval: Fuzzilli_Protobuf_Eval {
    get {
      if case .eval(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Eval()
    }
    set {operation = .eval(newValue)}
  }

  public var beginWith: Fuzzilli_Protobuf_BeginWith {
    get {
      if case .beginWith(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginWith()
    }
    set {operation = .beginWith(newValue)}
  }

  public var endWith: Fuzzilli_Protobuf_EndWith {
    get {
      if case .endWith(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndWith()
    }
    set {operation = .endWith(newValue)}
  }

  public var callSuperConstructor: Fuzzilli_Protobuf_CallSuperConstructor {
    get {
      if case .callSuperConstructor(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CallSuperConstructor()
    }
    set {operation = .callSuperConstructor(newValue)}
  }

  public var callSuperMethod: Fuzzilli_Protobuf_CallSuperMethod {
    get {
      if case .callSuperMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CallSuperMethod()
    }
    set {operation = .callSuperMethod(newValue)}
  }

  public var getPrivateProperty: Fuzzilli_Protobuf_GetPrivateProperty {
    get {
      if case .getPrivateProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_GetPrivateProperty()
    }
    set {operation = .getPrivateProperty(newValue)}
  }

  public var setPrivateProperty: Fuzzilli_Protobuf_SetPrivateProperty {
    get {
      if case .setPrivateProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_SetPrivateProperty()
    }
    set {operation = .setPrivateProperty(newValue)}
  }

  public var updatePrivateProperty: Fuzzilli_Protobuf_UpdatePrivateProperty {
    get {
      if case .updatePrivateProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_UpdatePrivateProperty()
    }
    set {operation = .updatePrivateProperty(newValue)}
  }

  public var callPrivateMethod: Fuzzilli_Protobuf_CallPrivateMethod {
    get {
      if case .callPrivateMethod(let v)? = operation {return v}
      return Fuzzilli_Protobuf_CallPrivateMethod()
    }
    set {operation = .callPrivateMethod(newValue)}
  }

  public var getSuperProperty: Fuzzilli_Protobuf_GetSuperProperty {
    get {
      if case .getSuperProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_GetSuperProperty()
    }
    set {operation = .getSuperProperty(newValue)}
  }

  public var setSuperProperty: Fuzzilli_Protobuf_SetSuperProperty {
    get {
      if case .setSuperProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_SetSuperProperty()
    }
    set {operation = .setSuperProperty(newValue)}
  }

  public var getComputedSuperProperty: Fuzzilli_Protobuf_GetComputedSuperProperty {
    get {
      if case .getComputedSuperProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_GetComputedSuperProperty()
    }
    set {operation = .getComputedSuperProperty(newValue)}
  }

  public var setComputedSuperProperty: Fuzzilli_Protobuf_SetComputedSuperProperty {
    get {
      if case .setComputedSuperProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_SetComputedSuperProperty()
    }
    set {operation = .setComputedSuperProperty(newValue)}
  }

  public var updateSuperProperty: Fuzzilli_Protobuf_UpdateSuperProperty {
    get {
      if case .updateSuperProperty(let v)? = operation {return v}
      return Fuzzilli_Protobuf_UpdateSuperProperty()
    }
    set {operation = .updateSuperProperty(newValue)}
  }

  public var beginIf: Fuzzilli_Protobuf_BeginIf {
    get {
      if case .beginIf(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginIf()
    }
    set {operation = .beginIf(newValue)}
  }

  public var beginElse: Fuzzilli_Protobuf_BeginElse {
    get {
      if case .beginElse(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginElse()
    }
    set {operation = .beginElse(newValue)}
  }

  public var endIf: Fuzzilli_Protobuf_EndIf {
    get {
      if case .endIf(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndIf()
    }
    set {operation = .endIf(newValue)}
  }

  public var beginWhileLoopHeader: Fuzzilli_Protobuf_BeginWhileLoopHeader {
    get {
      if case .beginWhileLoopHeader(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginWhileLoopHeader()
    }
    set {operation = .beginWhileLoopHeader(newValue)}
  }

  public var beginWhileLoopBody: Fuzzilli_Protobuf_BeginWhileLoopBody {
    get {
      if case .beginWhileLoopBody(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginWhileLoopBody()
    }
    set {operation = .beginWhileLoopBody(newValue)}
  }

  public var endWhileLoop: Fuzzilli_Protobuf_EndWhileLoop {
    get {
      if case .endWhileLoop(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndWhileLoop()
    }
    set {operation = .endWhileLoop(newValue)}
  }

  public var beginDoWhileLoopBody: Fuzzilli_Protobuf_BeginDoWhileLoopBody {
    get {
      if case .beginDoWhileLoopBody(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginDoWhileLoopBody()
    }
    set {operation = .beginDoWhileLoopBody(newValue)}
  }

  public var beginDoWhileLoopHeader: Fuzzilli_Protobuf_BeginDoWhileLoopHeader {
    get {
      if case .beginDoWhileLoopHeader(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginDoWhileLoopHeader()
    }
    set {operation = .beginDoWhileLoopHeader(newValue)}
  }

  public var endDoWhileLoop: Fuzzilli_Protobuf_EndDoWhileLoop {
    get {
      if case .endDoWhileLoop(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndDoWhileLoop()
    }
    set {operation = .endDoWhileLoop(newValue)}
  }

  public var beginForLoopInitializer: Fuzzilli_Protobuf_BeginForLoopInitializer {
    get {
      if case .beginForLoopInitializer(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginForLoopInitializer()
    }
    set {operation = .beginForLoopInitializer(newValue)}
  }

  public var beginForLoopCondition: Fuzzilli_Protobuf_BeginForLoopCondition {
    get {
      if case .beginForLoopCondition(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginForLoopCondition()
    }
    set {operation = .beginForLoopCondition(newValue)}
  }

  public var beginForLoopAfterthought: Fuzzilli_Protobuf_BeginForLoopAfterthought {
    get {
      if case .beginForLoopAfterthought(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginForLoopAfterthought()
    }
    set {operation = .beginForLoopAfterthought(newValue)}
  }

  public var beginForLoopBody: Fuzzilli_Protobuf_BeginForLoopBody {
    get {
      if case .beginForLoopBody(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginForLoopBody()
    }
    set {operation = .beginForLoopBody(newValue)}
  }

  public var endForLoop: Fuzzilli_Protobuf_EndForLoop {
    get {
      if case .endForLoop(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndForLoop()
    }
    set {operation = .endForLoop(newValue)}
  }

  public var beginForInLoop: Fuzzilli_Protobuf_BeginForInLoop {
    get {
      if case .beginForInLoop(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginForInLoop()
    }
    set {operation = .beginForInLoop(newValue)}
  }

  public var endForInLoop: Fuzzilli_Protobuf_EndForInLoop {
    get {
      if case .endForInLoop(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndForInLoop()
    }
    set {operation = .endForInLoop(newValue)}
  }

  public var beginForOfLoop: Fuzzilli_Protobuf_BeginForOfLoop {
    get {
      if case .beginForOfLoop(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginForOfLoop()
    }
    set {operation = .beginForOfLoop(newValue)}
  }

  public var beginForOfLoopWithDestruct: Fuzzilli_Protobuf_BeginForOfLoopWithDestruct {
    get {
      if case .beginForOfLoopWithDestruct(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginForOfLoopWithDestruct()
    }
    set {operation = .beginForOfLoopWithDestruct(newValue)}
  }

  public var endForOfLoop: Fuzzilli_Protobuf_EndForOfLoop {
    get {
      if case .endForOfLoop(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndForOfLoop()
    }
    set {operation = .endForOfLoop(newValue)}
  }

  public var beginRepeatLoop: Fuzzilli_Protobuf_BeginRepeatLoop {
    get {
      if case .beginRepeatLoop(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginRepeatLoop()
    }
    set {operation = .beginRepeatLoop(newValue)}
  }

  public var endRepeatLoop: Fuzzilli_Protobuf_EndRepeatLoop {
    get {
      if case .endRepeatLoop(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndRepeatLoop()
    }
    set {operation = .endRepeatLoop(newValue)}
  }

  public var loopBreak: Fuzzilli_Protobuf_LoopBreak {
    get {
      if case .loopBreak(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoopBreak()
    }
    set {operation = .loopBreak(newValue)}
  }

  public var loopContinue: Fuzzilli_Protobuf_LoopContinue {
    get {
      if case .loopContinue(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoopContinue()
    }
    set {operation = .loopContinue(newValue)}
  }

  public var loopBreakNested: Fuzzilli_Protobuf_LoopBreakNested {
    get {
      if case .loopBreakNested(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoopBreakNested()
    }
    set {operation = .loopBreakNested(newValue)}
  }

  public var loopContinueNested: Fuzzilli_Protobuf_LoopContinueNested {
    get {
      if case .loopContinueNested(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoopContinueNested()
    }
    set {operation = .loopContinueNested(newValue)}
  }

  public var beginTry: Fuzzilli_Protobuf_BeginTry {
    get {
      if case .beginTry(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginTry()
    }
    set {operation = .beginTry(newValue)}
  }

  public var beginCatch: Fuzzilli_Protobuf_BeginCatch {
    get {
      if case .beginCatch(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginCatch()
    }
    set {operation = .beginCatch(newValue)}
  }

  public var beginFinally: Fuzzilli_Protobuf_BeginFinally {
    get {
      if case .beginFinally(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginFinally()
    }
    set {operation = .beginFinally(newValue)}
  }

  public var endTryCatchFinally: Fuzzilli_Protobuf_EndTryCatchFinally {
    get {
      if case .endTryCatchFinally(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndTryCatchFinally()
    }
    set {operation = .endTryCatchFinally(newValue)}
  }

  public var throwException: Fuzzilli_Protobuf_ThrowException {
    get {
      if case .throwException(let v)? = operation {return v}
      return Fuzzilli_Protobuf_ThrowException()
    }
    set {operation = .throwException(newValue)}
  }

  public var beginCodeString: Fuzzilli_Protobuf_BeginCodeString {
    get {
      if case .beginCodeString(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginCodeString()
    }
    set {operation = .beginCodeString(newValue)}
  }

  public var endCodeString: Fuzzilli_Protobuf_EndCodeString {
    get {
      if case .endCodeString(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndCodeString()
    }
    set {operation = .endCodeString(newValue)}
  }

  public var beginBlockStatement: Fuzzilli_Protobuf_BeginBlockStatement {
    get {
      if case .beginBlockStatement(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginBlockStatement()
    }
    set {operation = .beginBlockStatement(newValue)}
  }

  public var endBlockStatement: Fuzzilli_Protobuf_EndBlockStatement {
    get {
      if case .endBlockStatement(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndBlockStatement()
    }
    set {operation = .endBlockStatement(newValue)}
  }

  public var beginSwitch: Fuzzilli_Protobuf_BeginSwitch {
    get {
      if case .beginSwitch(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginSwitch()
    }
    set {operation = .beginSwitch(newValue)}
  }

  public var beginSwitchCase: Fuzzilli_Protobuf_BeginSwitchCase {
    get {
      if case .beginSwitchCase(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginSwitchCase()
    }
    set {operation = .beginSwitchCase(newValue)}
  }

  public var beginSwitchDefaultCase: Fuzzilli_Protobuf_BeginSwitchDefaultCase {
    get {
      if case .beginSwitchDefaultCase(let v)? = operation {return v}
      return Fuzzilli_Protobuf_BeginSwitchDefaultCase()
    }
    set {operation = .beginSwitchDefaultCase(newValue)}
  }

  public var endSwitchCase: Fuzzilli_Protobuf_EndSwitchCase {
    get {
      if case .endSwitchCase(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndSwitchCase()
    }
    set {operation = .endSwitchCase(newValue)}
  }

  public var endSwitch: Fuzzilli_Protobuf_EndSwitch {
    get {
      if case .endSwitch(let v)? = operation {return v}
      return Fuzzilli_Protobuf_EndSwitch()
    }
    set {operation = .endSwitch(newValue)}
  }

  public var switchBreak: Fuzzilli_Protobuf_SwitchBreak {
    get {
      if case .switchBreak(let v)? = operation {return v}
      return Fuzzilli_Protobuf_SwitchBreak()
    }
    set {operation = .switchBreak(newValue)}
  }

  public var loadNewTarget: Fuzzilli_Protobuf_LoadNewTarget {
    get {
      if case .loadNewTarget(let v)? = operation {return v}
      return Fuzzilli_Protobuf_LoadNewTarget()
    }
    set {operation = .loadNewTarget(newValue)}
  }

  public var print: Fuzzilli_Protobuf_Print {
    get {
      if case .print(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Print()
    }
    set {operation = .print(newValue)}
  }

  public var explore: Fuzzilli_Protobuf_Explore {
    get {
      if case .explore(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Explore()
    }
    set {operation = .explore(newValue)}
  }

  public var probe: Fuzzilli_Protobuf_Probe {
    get {
      if case .probe(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Probe()
    }
    set {operation = .probe(newValue)}
  }

  public var fixup: Fuzzilli_Protobuf_Fixup {
    get {
      if case .fixup(let v)? = operation {return v}
      return Fuzzilli_Protobuf_Fixup()
    }
    set {operation = .fixup(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Operation: Equatable, Sendable {
    case opIdx(UInt32)
    case nop(Fuzzilli_Protobuf_Nop)
    case loadInteger(Fuzzilli_Protobuf_LoadInteger)
    case loadBigInt(Fuzzilli_Protobuf_LoadBigInt)
    case loadFloat(Fuzzilli_Protobuf_LoadFloat)
    case loadString(Fuzzilli_Protobuf_LoadString)
    case loadBoolean(Fuzzilli_Protobuf_LoadBoolean)
    case loadUndefined(Fuzzilli_Protobuf_LoadUndefined)
    case loadNull(Fuzzilli_Protobuf_LoadNull)
    case loadThis(Fuzzilli_Protobuf_LoadThis)
    case loadArguments(Fuzzilli_Protobuf_LoadArguments)
    case loadRegExp(Fuzzilli_Protobuf_LoadRegExp)
    case beginObjectLiteral(Fuzzilli_Protobuf_BeginObjectLiteral)
    case objectLiteralAddProperty(Fuzzilli_Protobuf_ObjectLiteralAddProperty)
    case objectLiteralAddElement(Fuzzilli_Protobuf_ObjectLiteralAddElement)
    case objectLiteralAddComputedProperty(Fuzzilli_Protobuf_ObjectLiteralAddComputedProperty)
    case objectLiteralCopyProperties(Fuzzilli_Protobuf_ObjectLiteralCopyProperties)
    case objectLiteralSetPrototype(Fuzzilli_Protobuf_ObjectLiteralSetPrototype)
    case beginObjectLiteralMethod(Fuzzilli_Protobuf_BeginObjectLiteralMethod)
    case endObjectLiteralMethod(Fuzzilli_Protobuf_EndObjectLiteralMethod)
    case beginObjectLiteralComputedMethod(Fuzzilli_Protobuf_BeginObjectLiteralComputedMethod)
    case endObjectLiteralComputedMethod(Fuzzilli_Protobuf_EndObjectLiteralComputedMethod)
    case beginObjectLiteralGetter(Fuzzilli_Protobuf_BeginObjectLiteralGetter)
    case endObjectLiteralGetter(Fuzzilli_Protobuf_EndObjectLiteralGetter)
    case beginObjectLiteralSetter(Fuzzilli_Protobuf_BeginObjectLiteralSetter)
    case endObjectLiteralSetter(Fuzzilli_Protobuf_EndObjectLiteralSetter)
    case endObjectLiteral(Fuzzilli_Protobuf_EndObjectLiteral)
    case beginClassDefinition(Fuzzilli_Protobuf_BeginClassDefinition)
    case beginClassConstructor(Fuzzilli_Protobuf_BeginClassConstructor)
    case endClassConstructor(Fuzzilli_Protobuf_EndClassConstructor)
    case classAddInstanceProperty(Fuzzilli_Protobuf_ClassAddInstanceProperty)
    case classAddInstanceElement(Fuzzilli_Protobuf_ClassAddInstanceElement)
    case classAddInstanceComputedProperty(Fuzzilli_Protobuf_ClassAddInstanceComputedProperty)
    case beginClassInstanceMethod(Fuzzilli_Protobuf_BeginClassInstanceMethod)
    case endClassInstanceMethod(Fuzzilli_Protobuf_EndClassInstanceMethod)
    case beginClassInstanceGetter(Fuzzilli_Protobuf_BeginClassInstanceGetter)
    case endClassInstanceGetter(Fuzzilli_Protobuf_EndClassInstanceGetter)
    case beginClassInstanceSetter(Fuzzilli_Protobuf_BeginClassInstanceSetter)
    case endClassInstanceSetter(Fuzzilli_Protobuf_EndClassInstanceSetter)
    case classAddStaticProperty(Fuzzilli_Protobuf_ClassAddStaticProperty)
    case classAddStaticElement(Fuzzilli_Protobuf_ClassAddStaticElement)
    case classAddStaticComputedProperty(Fuzzilli_Protobuf_ClassAddStaticComputedProperty)
    case beginClassStaticInitializer(Fuzzilli_Protobuf_BeginClassStaticInitializer)
    case endClassStaticInitializer(Fuzzilli_Protobuf_EndClassStaticInitializer)
    case beginClassStaticMethod(Fuzzilli_Protobuf_BeginClassStaticMethod)
    case endClassStaticMethod(Fuzzilli_Protobuf_EndClassStaticMethod)
    case beginClassStaticGetter(Fuzzilli_Protobuf_BeginClassStaticGetter)
    case endClassStaticGetter(Fuzzilli_Protobuf_EndClassStaticGetter)
    case beginClassStaticSetter(Fuzzilli_Protobuf_BeginClassStaticSetter)
    case endClassStaticSetter(Fuzzilli_Protobuf_EndClassStaticSetter)
    case classAddPrivateInstanceProperty(Fuzzilli_Protobuf_ClassAddPrivateInstanceProperty)
    case beginClassPrivateInstanceMethod(Fuzzilli_Protobuf_BeginClassPrivateInstanceMethod)
    case endClassPrivateInstanceMethod(Fuzzilli_Protobuf_EndClassPrivateInstanceMethod)
    case classAddPrivateStaticProperty(Fuzzilli_Protobuf_ClassAddPrivateStaticProperty)
    case beginClassPrivateStaticMethod(Fuzzilli_Protobuf_BeginClassPrivateStaticMethod)
    case endClassPrivateStaticMethod(Fuzzilli_Protobuf_EndClassPrivateStaticMethod)
    case endClassDefinition(Fuzzilli_Protobuf_EndClassDefinition)
    case createArray(Fuzzilli_Protobuf_CreateArray)
    case createIntArray(Fuzzilli_Protobuf_CreateIntArray)
    case createFloatArray(Fuzzilli_Protobuf_CreateFloatArray)
    case createArrayWithSpread(Fuzzilli_Protobuf_CreateArrayWithSpread)
    case createTemplateString(Fuzzilli_Protobuf_CreateTemplateString)
    case loadBuiltin(Fuzzilli_Protobuf_LoadBuiltin)
    case getProperty(Fuzzilli_Protobuf_GetProperty)
    case setProperty(Fuzzilli_Protobuf_SetProperty)
    case updateProperty(Fuzzilli_Protobuf_UpdateProperty)
    case deleteProperty(Fuzzilli_Protobuf_DeleteProperty)
    case configureProperty(Fuzzilli_Protobuf_ConfigureProperty)
    case getElement(Fuzzilli_Protobuf_GetElement)
    case setElement(Fuzzilli_Protobuf_SetElement)
    case updateElement(Fuzzilli_Protobuf_UpdateElement)
    case deleteElement(Fuzzilli_Protobuf_DeleteElement)
    case configureElement(Fuzzilli_Protobuf_ConfigureElement)
    case getComputedProperty(Fuzzilli_Protobuf_GetComputedProperty)
    case setComputedProperty(Fuzzilli_Protobuf_SetComputedProperty)
    case updateComputedProperty(Fuzzilli_Protobuf_UpdateComputedProperty)
    case deleteComputedProperty(Fuzzilli_Protobuf_DeleteComputedProperty)
    case configureComputedProperty(Fuzzilli_Protobuf_ConfigureComputedProperty)
    case typeOf(Fuzzilli_Protobuf_TypeOf)
    case void(Fuzzilli_Protobuf_Void)
    case testInstanceOf(Fuzzilli_Protobuf_TestInstanceOf)
    case testIn(Fuzzilli_Protobuf_TestIn)
    case beginPlainFunction(Fuzzilli_Protobuf_BeginPlainFunction)
    case endPlainFunction(Fuzzilli_Protobuf_EndPlainFunction)
    case beginArrowFunction(Fuzzilli_Protobuf_BeginArrowFunction)
    case endArrowFunction(Fuzzilli_Protobuf_EndArrowFunction)
    case beginGeneratorFunction(Fuzzilli_Protobuf_BeginGeneratorFunction)
    case endGeneratorFunction(Fuzzilli_Protobuf_EndGeneratorFunction)
    case beginAsyncFunction(Fuzzilli_Protobuf_BeginAsyncFunction)
    case endAsyncFunction(Fuzzilli_Protobuf_EndAsyncFunction)
    case beginAsyncArrowFunction(Fuzzilli_Protobuf_BeginAsyncArrowFunction)
    case endAsyncArrowFunction(Fuzzilli_Protobuf_EndAsyncArrowFunction)
    case beginAsyncGeneratorFunction(Fuzzilli_Protobuf_BeginAsyncGeneratorFunction)
    case endAsyncGeneratorFunction(Fuzzilli_Protobuf_EndAsyncGeneratorFunction)
    case beginConstructor(Fuzzilli_Protobuf_BeginConstructor)
    case endConstructor(Fuzzilli_Protobuf_EndConstructor)
    case `return`(Fuzzilli_Protobuf_Return)
    case yield(Fuzzilli_Protobuf_Yield)
    case yieldEach(Fuzzilli_Protobuf_YieldEach)
    case await(Fuzzilli_Protobuf_Await)
    case callFunction(Fuzzilli_Protobuf_CallFunction)
    case callFunctionWithSpread(Fuzzilli_Protobuf_CallFunctionWithSpread)
    case construct(Fuzzilli_Protobuf_Construct)
    case constructWithSpread(Fuzzilli_Protobuf_ConstructWithSpread)
    case callMethod(Fuzzilli_Protobuf_CallMethod)
    case callMethodWithSpread(Fuzzilli_Protobuf_CallMethodWithSpread)
    case callComputedMethod(Fuzzilli_Protobuf_CallComputedMethod)
    case callComputedMethodWithSpread(Fuzzilli_Protobuf_CallComputedMethodWithSpread)
    case unaryOperation(Fuzzilli_Protobuf_UnaryOperation)
    case binaryOperation(Fuzzilli_Protobuf_BinaryOperation)
    case ternaryOperation(Fuzzilli_Protobuf_TernaryOperation)
    case update(Fuzzilli_Protobuf_Update)
    case dup(Fuzzilli_Protobuf_Dup)
    case reassign(Fuzzilli_Protobuf_Reassign)
    case destructArray(Fuzzilli_Protobuf_DestructArray)
    case destructArrayAndReassign(Fuzzilli_Protobuf_DestructArrayAndReassign)
    case destructObject(Fuzzilli_Protobuf_DestructObject)
    case destructObjectAndReassign(Fuzzilli_Protobuf_DestructObjectAndReassign)
    case compare(Fuzzilli_Protobuf_Compare)
    case loadNamedVariable(Fuzzilli_Protobuf_LoadNamedVariable)
    case storeNamedVariable(Fuzzilli_Protobuf_StoreNamedVariable)
    case defineNamedVariable(Fuzzilli_Protobuf_DefineNamedVariable)
    case eval(Fuzzilli_Protobuf_Eval)
    case beginWith(Fuzzilli_Protobuf_BeginWith)
    case endWith(Fuzzilli_Protobuf_EndWith)
    case callSuperConstructor(Fuzzilli_Protobuf_CallSuperConstructor)
    case callSuperMethod(Fuzzilli_Protobuf_CallSuperMethod)
    case getPrivateProperty(Fuzzilli_Protobuf_GetPrivateProperty)
    case setPrivateProperty(Fuzzilli_Protobuf_SetPrivateProperty)
    case updatePrivateProperty(Fuzzilli_Protobuf_UpdatePrivateProperty)
    case callPrivateMethod(Fuzzilli_Protobuf_CallPrivateMethod)
    case getSuperProperty(Fuzzilli_Protobuf_GetSuperProperty)
    case setSuperProperty(Fuzzilli_Protobuf_SetSuperProperty)
    case getComputedSuperProperty(Fuzzilli_Protobuf_GetComputedSuperProperty)
    case setComputedSuperProperty(Fuzzilli_Protobuf_SetComputedSuperProperty)
    case updateSuperProperty(Fuzzilli_Protobuf_UpdateSuperProperty)
    case beginIf(Fuzzilli_Protobuf_BeginIf)
    case beginElse(Fuzzilli_Protobuf_BeginElse)
    case endIf(Fuzzilli_Protobuf_EndIf)
    case beginWhileLoopHeader(Fuzzilli_Protobuf_BeginWhileLoopHeader)
    case beginWhileLoopBody(Fuzzilli_Protobuf_BeginWhileLoopBody)
    case endWhileLoop(Fuzzilli_Protobuf_EndWhileLoop)
    case beginDoWhileLoopBody(Fuzzilli_Protobuf_BeginDoWhileLoopBody)
    case beginDoWhileLoopHeader(Fuzzilli_Protobuf_BeginDoWhileLoopHeader)
    case endDoWhileLoop(Fuzzilli_Protobuf_EndDoWhileLoop)
    case beginForLoopInitializer(Fuzzilli_Protobuf_BeginForLoopInitializer)
    case beginForLoopCondition(Fuzzilli_Protobuf_BeginForLoopCondition)
    case beginForLoopAfterthought(Fuzzilli_Protobuf_BeginForLoopAfterthought)
    case beginForLoopBody(Fuzzilli_Protobuf_BeginForLoopBody)
    case endForLoop(Fuzzilli_Protobuf_EndForLoop)
    case beginForInLoop(Fuzzilli_Protobuf_BeginForInLoop)
    case endForInLoop(Fuzzilli_Protobuf_EndForInLoop)
    case beginForOfLoop(Fuzzilli_Protobuf_BeginForOfLoop)
    case beginForOfLoopWithDestruct(Fuzzilli_Protobuf_BeginForOfLoopWithDestruct)
    case endForOfLoop(Fuzzilli_Protobuf_EndForOfLoop)
    case beginRepeatLoop(Fuzzilli_Protobuf_BeginRepeatLoop)
    case endRepeatLoop(Fuzzilli_Protobuf_EndRepeatLoop)
    case loopBreak(Fuzzilli_Protobuf_LoopBreak)
    case loopContinue(Fuzzilli_Protobuf_LoopContinue)
    case loopBreakNested(Fuzzilli_Protobuf_LoopBreakNested)
    case loopContinueNested(Fuzzilli_Protobuf_LoopContinueNested)
    case beginTry(Fuzzilli_Protobuf_BeginTry)
    case beginCatch(Fuzzilli_Protobuf_BeginCatch)
    case beginFinally(Fuzzilli_Protobuf_BeginFinally)
    case endTryCatchFinally(Fuzzilli_Protobuf_EndTryCatchFinally)
    case throwException(Fuzzilli_Protobuf_ThrowException)
    case beginCodeString(Fuzzilli_Protobuf_BeginCodeString)
    case endCodeString(Fuzzilli_Protobuf_EndCodeString)
    case beginBlockStatement(Fuzzilli_Protobuf_BeginBlockStatement)
    case endBlockStatement(Fuzzilli_Protobuf_EndBlockStatement)
    case beginSwitch(Fuzzilli_Protobuf_BeginSwitch)
    case beginSwitchCase(Fuzzilli_Protobuf_BeginSwitchCase)
    case beginSwitchDefaultCase(Fuzzilli_Protobuf_BeginSwitchDefaultCase)
    case endSwitchCase(Fuzzilli_Protobuf_EndSwitchCase)
    case endSwitch(Fuzzilli_Protobuf_EndSwitch)
    case switchBreak(Fuzzilli_Protobuf_SwitchBreak)
    case loadNewTarget(Fuzzilli_Protobuf_LoadNewTarget)
    case print(Fuzzilli_Protobuf_Print)
    case explore(Fuzzilli_Protobuf_Explore)
    case probe(Fuzzilli_Protobuf_Probe)
    case fixup(Fuzzilli_Protobuf_Fixup)

  }

  public init() {}
}

public struct Fuzzilli_Protobuf_Program: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uuid: Data {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  public var code: [Fuzzilli_Protobuf_Instruction] {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var comments: Dictionary<Int32,String> {
    get {return _storage._comments}
    set {_uniqueStorage()._comments = newValue}
  }

  public var parent: Fuzzilli_Protobuf_Program {
    get {return _storage._parent ?? Fuzzilli_Protobuf_Program()}
    set {_uniqueStorage()._parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  public var hasParent: Bool {return _storage._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  public mutating func clearParent() {_uniqueStorage()._parent = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "fuzzilli.protobuf"

extension Fuzzilli_Protobuf_Instruction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Instruction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inouts"),
    2: .same(proto: "opIdx"),
    3: .same(proto: "nop"),
    4: .same(proto: "loadInteger"),
    5: .same(proto: "loadBigInt"),
    6: .same(proto: "loadFloat"),
    7: .same(proto: "loadString"),
    8: .same(proto: "loadBoolean"),
    9: .same(proto: "loadUndefined"),
    10: .same(proto: "loadNull"),
    11: .same(proto: "loadThis"),
    12: .same(proto: "loadArguments"),
    13: .same(proto: "loadRegExp"),
    14: .same(proto: "beginObjectLiteral"),
    15: .same(proto: "objectLiteralAddProperty"),
    16: .same(proto: "objectLiteralAddElement"),
    17: .same(proto: "objectLiteralAddComputedProperty"),
    18: .same(proto: "objectLiteralCopyProperties"),
    19: .same(proto: "objectLiteralSetPrototype"),
    20: .same(proto: "beginObjectLiteralMethod"),
    21: .same(proto: "endObjectLiteralMethod"),
    22: .same(proto: "beginObjectLiteralComputedMethod"),
    23: .same(proto: "endObjectLiteralComputedMethod"),
    24: .same(proto: "beginObjectLiteralGetter"),
    25: .same(proto: "endObjectLiteralGetter"),
    26: .same(proto: "beginObjectLiteralSetter"),
    27: .same(proto: "endObjectLiteralSetter"),
    28: .same(proto: "endObjectLiteral"),
    29: .same(proto: "beginClassDefinition"),
    30: .same(proto: "beginClassConstructor"),
    31: .same(proto: "endClassConstructor"),
    32: .same(proto: "classAddInstanceProperty"),
    33: .same(proto: "classAddInstanceElement"),
    34: .same(proto: "classAddInstanceComputedProperty"),
    35: .same(proto: "beginClassInstanceMethod"),
    36: .same(proto: "endClassInstanceMethod"),
    37: .same(proto: "beginClassInstanceGetter"),
    38: .same(proto: "endClassInstanceGetter"),
    39: .same(proto: "beginClassInstanceSetter"),
    40: .same(proto: "endClassInstanceSetter"),
    41: .same(proto: "classAddStaticProperty"),
    42: .same(proto: "classAddStaticElement"),
    43: .same(proto: "classAddStaticComputedProperty"),
    44: .same(proto: "beginClassStaticInitializer"),
    45: .same(proto: "endClassStaticInitializer"),
    46: .same(proto: "beginClassStaticMethod"),
    47: .same(proto: "endClassStaticMethod"),
    48: .same(proto: "beginClassStaticGetter"),
    49: .same(proto: "endClassStaticGetter"),
    50: .same(proto: "beginClassStaticSetter"),
    51: .same(proto: "endClassStaticSetter"),
    52: .same(proto: "classAddPrivateInstanceProperty"),
    53: .same(proto: "beginClassPrivateInstanceMethod"),
    54: .same(proto: "endClassPrivateInstanceMethod"),
    55: .same(proto: "classAddPrivateStaticProperty"),
    56: .same(proto: "beginClassPrivateStaticMethod"),
    57: .same(proto: "endClassPrivateStaticMethod"),
    58: .same(proto: "endClassDefinition"),
    59: .same(proto: "createArray"),
    60: .same(proto: "createIntArray"),
    61: .same(proto: "createFloatArray"),
    62: .same(proto: "createArrayWithSpread"),
    63: .same(proto: "createTemplateString"),
    64: .same(proto: "loadBuiltin"),
    65: .same(proto: "getProperty"),
    66: .same(proto: "setProperty"),
    67: .same(proto: "updateProperty"),
    68: .same(proto: "deleteProperty"),
    69: .same(proto: "configureProperty"),
    70: .same(proto: "getElement"),
    71: .same(proto: "setElement"),
    72: .same(proto: "updateElement"),
    73: .same(proto: "deleteElement"),
    74: .same(proto: "configureElement"),
    75: .same(proto: "getComputedProperty"),
    76: .same(proto: "setComputedProperty"),
    77: .same(proto: "updateComputedProperty"),
    78: .same(proto: "deleteComputedProperty"),
    79: .same(proto: "configureComputedProperty"),
    80: .same(proto: "typeOf"),
    81: .same(proto: "void"),
    82: .same(proto: "testInstanceOf"),
    83: .same(proto: "testIn"),
    84: .same(proto: "beginPlainFunction"),
    85: .same(proto: "endPlainFunction"),
    86: .same(proto: "beginArrowFunction"),
    87: .same(proto: "endArrowFunction"),
    88: .same(proto: "beginGeneratorFunction"),
    89: .same(proto: "endGeneratorFunction"),
    90: .same(proto: "beginAsyncFunction"),
    91: .same(proto: "endAsyncFunction"),
    92: .same(proto: "beginAsyncArrowFunction"),
    93: .same(proto: "endAsyncArrowFunction"),
    94: .same(proto: "beginAsyncGeneratorFunction"),
    95: .same(proto: "endAsyncGeneratorFunction"),
    96: .same(proto: "beginConstructor"),
    97: .same(proto: "endConstructor"),
    98: .same(proto: "return"),
    99: .same(proto: "yield"),
    100: .same(proto: "yieldEach"),
    101: .same(proto: "await"),
    102: .same(proto: "callFunction"),
    103: .same(proto: "callFunctionWithSpread"),
    104: .same(proto: "construct"),
    105: .same(proto: "constructWithSpread"),
    106: .same(proto: "callMethod"),
    107: .same(proto: "callMethodWithSpread"),
    108: .same(proto: "callComputedMethod"),
    109: .same(proto: "callComputedMethodWithSpread"),
    110: .same(proto: "unaryOperation"),
    111: .same(proto: "binaryOperation"),
    112: .same(proto: "ternaryOperation"),
    113: .same(proto: "update"),
    114: .same(proto: "dup"),
    115: .same(proto: "reassign"),
    116: .same(proto: "destructArray"),
    117: .same(proto: "destructArrayAndReassign"),
    118: .same(proto: "destructObject"),
    119: .same(proto: "destructObjectAndReassign"),
    120: .same(proto: "compare"),
    121: .same(proto: "loadNamedVariable"),
    122: .same(proto: "storeNamedVariable"),
    123: .same(proto: "defineNamedVariable"),
    124: .same(proto: "eval"),
    125: .same(proto: "beginWith"),
    126: .same(proto: "endWith"),
    127: .same(proto: "callSuperConstructor"),
    128: .same(proto: "callSuperMethod"),
    129: .same(proto: "getPrivateProperty"),
    130: .same(proto: "setPrivateProperty"),
    131: .same(proto: "updatePrivateProperty"),
    132: .same(proto: "callPrivateMethod"),
    133: .same(proto: "getSuperProperty"),
    134: .same(proto: "setSuperProperty"),
    135: .same(proto: "getComputedSuperProperty"),
    136: .same(proto: "setComputedSuperProperty"),
    137: .same(proto: "updateSuperProperty"),
    138: .same(proto: "beginIf"),
    139: .same(proto: "beginElse"),
    140: .same(proto: "endIf"),
    141: .same(proto: "beginWhileLoopHeader"),
    142: .same(proto: "beginWhileLoopBody"),
    143: .same(proto: "endWhileLoop"),
    144: .same(proto: "beginDoWhileLoopBody"),
    145: .same(proto: "beginDoWhileLoopHeader"),
    146: .same(proto: "endDoWhileLoop"),
    147: .same(proto: "beginForLoopInitializer"),
    148: .same(proto: "beginForLoopCondition"),
    149: .same(proto: "beginForLoopAfterthought"),
    150: .same(proto: "beginForLoopBody"),
    151: .same(proto: "endForLoop"),
    152: .same(proto: "beginForInLoop"),
    153: .same(proto: "endForInLoop"),
    154: .same(proto: "beginForOfLoop"),
    155: .same(proto: "beginForOfLoopWithDestruct"),
    156: .same(proto: "endForOfLoop"),
    157: .same(proto: "beginRepeatLoop"),
    158: .same(proto: "endRepeatLoop"),
    159: .same(proto: "loopBreak"),
    160: .same(proto: "loopContinue"),
    161: .same(proto: "beginTry"),
    162: .same(proto: "beginCatch"),
    163: .same(proto: "beginFinally"),
    164: .same(proto: "endTryCatchFinally"),
    165: .same(proto: "throwException"),
    166: .same(proto: "beginCodeString"),
    167: .same(proto: "endCodeString"),
    168: .same(proto: "beginBlockStatement"),
    169: .same(proto: "endBlockStatement"),
    170: .same(proto: "beginSwitch"),
    171: .same(proto: "beginSwitchCase"),
    172: .same(proto: "beginSwitchDefaultCase"),
    173: .same(proto: "endSwitchCase"),
    174: .same(proto: "endSwitch"),
    175: .same(proto: "switchBreak"),
    176: .same(proto: "loadNewTarget"),
    177: .same(proto: "print"),
    178: .same(proto: "explore"),
    179: .same(proto: "probe"),
    180: .same(proto: "fixup"),
    181: .same(proto: "loopBreakNested"),
    182: .same(proto: "loopContinueNested"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt32Field(value: &self.inouts) }()
      case 2: try {
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {
          if self.operation != nil {try decoder.handleConflictingOneOf()}
          self.operation = .opIdx(v)
        }
      }()
      case 3: try {
        var v: Fuzzilli_Protobuf_Nop?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .nop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .nop(v)
        }
      }()
      case 4: try {
        var v: Fuzzilli_Protobuf_LoadInteger?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadInteger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadInteger(v)
        }
      }()
      case 5: try {
        var v: Fuzzilli_Protobuf_LoadBigInt?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadBigInt(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadBigInt(v)
        }
      }()
      case 6: try {
        var v: Fuzzilli_Protobuf_LoadFloat?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadFloat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadFloat(v)
        }
      }()
      case 7: try {
        var v: Fuzzilli_Protobuf_LoadString?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadString(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadString(v)
        }
      }()
      case 8: try {
        var v: Fuzzilli_Protobuf_LoadBoolean?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadBoolean(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadBoolean(v)
        }
      }()
      case 9: try {
        var v: Fuzzilli_Protobuf_LoadUndefined?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadUndefined(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadUndefined(v)
        }
      }()
      case 10: try {
        var v: Fuzzilli_Protobuf_LoadNull?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadNull(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadNull(v)
        }
      }()
      case 11: try {
        var v: Fuzzilli_Protobuf_LoadThis?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadThis(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadThis(v)
        }
      }()
      case 12: try {
        var v: Fuzzilli_Protobuf_LoadArguments?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadArguments(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadArguments(v)
        }
      }()
      case 13: try {
        var v: Fuzzilli_Protobuf_LoadRegExp?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadRegExp(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadRegExp(v)
        }
      }()
      case 14: try {
        var v: Fuzzilli_Protobuf_BeginObjectLiteral?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginObjectLiteral(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginObjectLiteral(v)
        }
      }()
      case 15: try {
        var v: Fuzzilli_Protobuf_ObjectLiteralAddProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .objectLiteralAddProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .objectLiteralAddProperty(v)
        }
      }()
      case 16: try {
        var v: Fuzzilli_Protobuf_ObjectLiteralAddElement?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .objectLiteralAddElement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .objectLiteralAddElement(v)
        }
      }()
      case 17: try {
        var v: Fuzzilli_Protobuf_ObjectLiteralAddComputedProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .objectLiteralAddComputedProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .objectLiteralAddComputedProperty(v)
        }
      }()
      case 18: try {
        var v: Fuzzilli_Protobuf_ObjectLiteralCopyProperties?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .objectLiteralCopyProperties(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .objectLiteralCopyProperties(v)
        }
      }()
      case 19: try {
        var v: Fuzzilli_Protobuf_ObjectLiteralSetPrototype?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .objectLiteralSetPrototype(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .objectLiteralSetPrototype(v)
        }
      }()
      case 20: try {
        var v: Fuzzilli_Protobuf_BeginObjectLiteralMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginObjectLiteralMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginObjectLiteralMethod(v)
        }
      }()
      case 21: try {
        var v: Fuzzilli_Protobuf_EndObjectLiteralMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endObjectLiteralMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endObjectLiteralMethod(v)
        }
      }()
      case 22: try {
        var v: Fuzzilli_Protobuf_BeginObjectLiteralComputedMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginObjectLiteralComputedMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginObjectLiteralComputedMethod(v)
        }
      }()
      case 23: try {
        var v: Fuzzilli_Protobuf_EndObjectLiteralComputedMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endObjectLiteralComputedMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endObjectLiteralComputedMethod(v)
        }
      }()
      case 24: try {
        var v: Fuzzilli_Protobuf_BeginObjectLiteralGetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginObjectLiteralGetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginObjectLiteralGetter(v)
        }
      }()
      case 25: try {
        var v: Fuzzilli_Protobuf_EndObjectLiteralGetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endObjectLiteralGetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endObjectLiteralGetter(v)
        }
      }()
      case 26: try {
        var v: Fuzzilli_Protobuf_BeginObjectLiteralSetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginObjectLiteralSetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginObjectLiteralSetter(v)
        }
      }()
      case 27: try {
        var v: Fuzzilli_Protobuf_EndObjectLiteralSetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endObjectLiteralSetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endObjectLiteralSetter(v)
        }
      }()
      case 28: try {
        var v: Fuzzilli_Protobuf_EndObjectLiteral?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endObjectLiteral(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endObjectLiteral(v)
        }
      }()
      case 29: try {
        var v: Fuzzilli_Protobuf_BeginClassDefinition?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassDefinition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassDefinition(v)
        }
      }()
      case 30: try {
        var v: Fuzzilli_Protobuf_BeginClassConstructor?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassConstructor(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassConstructor(v)
        }
      }()
      case 31: try {
        var v: Fuzzilli_Protobuf_EndClassConstructor?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassConstructor(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassConstructor(v)
        }
      }()
      case 32: try {
        var v: Fuzzilli_Protobuf_ClassAddInstanceProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .classAddInstanceProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .classAddInstanceProperty(v)
        }
      }()
      case 33: try {
        var v: Fuzzilli_Protobuf_ClassAddInstanceElement?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .classAddInstanceElement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .classAddInstanceElement(v)
        }
      }()
      case 34: try {
        var v: Fuzzilli_Protobuf_ClassAddInstanceComputedProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .classAddInstanceComputedProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .classAddInstanceComputedProperty(v)
        }
      }()
      case 35: try {
        var v: Fuzzilli_Protobuf_BeginClassInstanceMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassInstanceMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassInstanceMethod(v)
        }
      }()
      case 36: try {
        var v: Fuzzilli_Protobuf_EndClassInstanceMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassInstanceMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassInstanceMethod(v)
        }
      }()
      case 37: try {
        var v: Fuzzilli_Protobuf_BeginClassInstanceGetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassInstanceGetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassInstanceGetter(v)
        }
      }()
      case 38: try {
        var v: Fuzzilli_Protobuf_EndClassInstanceGetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassInstanceGetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassInstanceGetter(v)
        }
      }()
      case 39: try {
        var v: Fuzzilli_Protobuf_BeginClassInstanceSetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassInstanceSetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassInstanceSetter(v)
        }
      }()
      case 40: try {
        var v: Fuzzilli_Protobuf_EndClassInstanceSetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassInstanceSetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassInstanceSetter(v)
        }
      }()
      case 41: try {
        var v: Fuzzilli_Protobuf_ClassAddStaticProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .classAddStaticProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .classAddStaticProperty(v)
        }
      }()
      case 42: try {
        var v: Fuzzilli_Protobuf_ClassAddStaticElement?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .classAddStaticElement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .classAddStaticElement(v)
        }
      }()
      case 43: try {
        var v: Fuzzilli_Protobuf_ClassAddStaticComputedProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .classAddStaticComputedProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .classAddStaticComputedProperty(v)
        }
      }()
      case 44: try {
        var v: Fuzzilli_Protobuf_BeginClassStaticInitializer?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassStaticInitializer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassStaticInitializer(v)
        }
      }()
      case 45: try {
        var v: Fuzzilli_Protobuf_EndClassStaticInitializer?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassStaticInitializer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassStaticInitializer(v)
        }
      }()
      case 46: try {
        var v: Fuzzilli_Protobuf_BeginClassStaticMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassStaticMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassStaticMethod(v)
        }
      }()
      case 47: try {
        var v: Fuzzilli_Protobuf_EndClassStaticMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassStaticMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassStaticMethod(v)
        }
      }()
      case 48: try {
        var v: Fuzzilli_Protobuf_BeginClassStaticGetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassStaticGetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassStaticGetter(v)
        }
      }()
      case 49: try {
        var v: Fuzzilli_Protobuf_EndClassStaticGetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassStaticGetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassStaticGetter(v)
        }
      }()
      case 50: try {
        var v: Fuzzilli_Protobuf_BeginClassStaticSetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassStaticSetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassStaticSetter(v)
        }
      }()
      case 51: try {
        var v: Fuzzilli_Protobuf_EndClassStaticSetter?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassStaticSetter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassStaticSetter(v)
        }
      }()
      case 52: try {
        var v: Fuzzilli_Protobuf_ClassAddPrivateInstanceProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .classAddPrivateInstanceProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .classAddPrivateInstanceProperty(v)
        }
      }()
      case 53: try {
        var v: Fuzzilli_Protobuf_BeginClassPrivateInstanceMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassPrivateInstanceMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassPrivateInstanceMethod(v)
        }
      }()
      case 54: try {
        var v: Fuzzilli_Protobuf_EndClassPrivateInstanceMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassPrivateInstanceMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassPrivateInstanceMethod(v)
        }
      }()
      case 55: try {
        var v: Fuzzilli_Protobuf_ClassAddPrivateStaticProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .classAddPrivateStaticProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .classAddPrivateStaticProperty(v)
        }
      }()
      case 56: try {
        var v: Fuzzilli_Protobuf_BeginClassPrivateStaticMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginClassPrivateStaticMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginClassPrivateStaticMethod(v)
        }
      }()
      case 57: try {
        var v: Fuzzilli_Protobuf_EndClassPrivateStaticMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassPrivateStaticMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassPrivateStaticMethod(v)
        }
      }()
      case 58: try {
        var v: Fuzzilli_Protobuf_EndClassDefinition?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endClassDefinition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endClassDefinition(v)
        }
      }()
      case 59: try {
        var v: Fuzzilli_Protobuf_CreateArray?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .createArray(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .createArray(v)
        }
      }()
      case 60: try {
        var v: Fuzzilli_Protobuf_CreateIntArray?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .createIntArray(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .createIntArray(v)
        }
      }()
      case 61: try {
        var v: Fuzzilli_Protobuf_CreateFloatArray?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .createFloatArray(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .createFloatArray(v)
        }
      }()
      case 62: try {
        var v: Fuzzilli_Protobuf_CreateArrayWithSpread?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .createArrayWithSpread(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .createArrayWithSpread(v)
        }
      }()
      case 63: try {
        var v: Fuzzilli_Protobuf_CreateTemplateString?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .createTemplateString(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .createTemplateString(v)
        }
      }()
      case 64: try {
        var v: Fuzzilli_Protobuf_LoadBuiltin?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadBuiltin(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadBuiltin(v)
        }
      }()
      case 65: try {
        var v: Fuzzilli_Protobuf_GetProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .getProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .getProperty(v)
        }
      }()
      case 66: try {
        var v: Fuzzilli_Protobuf_SetProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .setProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .setProperty(v)
        }
      }()
      case 67: try {
        var v: Fuzzilli_Protobuf_UpdateProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .updateProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .updateProperty(v)
        }
      }()
      case 68: try {
        var v: Fuzzilli_Protobuf_DeleteProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .deleteProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .deleteProperty(v)
        }
      }()
      case 69: try {
        var v: Fuzzilli_Protobuf_ConfigureProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .configureProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .configureProperty(v)
        }
      }()
      case 70: try {
        var v: Fuzzilli_Protobuf_GetElement?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .getElement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .getElement(v)
        }
      }()
      case 71: try {
        var v: Fuzzilli_Protobuf_SetElement?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .setElement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .setElement(v)
        }
      }()
      case 72: try {
        var v: Fuzzilli_Protobuf_UpdateElement?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .updateElement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .updateElement(v)
        }
      }()
      case 73: try {
        var v: Fuzzilli_Protobuf_DeleteElement?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .deleteElement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .deleteElement(v)
        }
      }()
      case 74: try {
        var v: Fuzzilli_Protobuf_ConfigureElement?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .configureElement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .configureElement(v)
        }
      }()
      case 75: try {
        var v: Fuzzilli_Protobuf_GetComputedProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .getComputedProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .getComputedProperty(v)
        }
      }()
      case 76: try {
        var v: Fuzzilli_Protobuf_SetComputedProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .setComputedProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .setComputedProperty(v)
        }
      }()
      case 77: try {
        var v: Fuzzilli_Protobuf_UpdateComputedProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .updateComputedProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .updateComputedProperty(v)
        }
      }()
      case 78: try {
        var v: Fuzzilli_Protobuf_DeleteComputedProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .deleteComputedProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .deleteComputedProperty(v)
        }
      }()
      case 79: try {
        var v: Fuzzilli_Protobuf_ConfigureComputedProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .configureComputedProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .configureComputedProperty(v)
        }
      }()
      case 80: try {
        var v: Fuzzilli_Protobuf_TypeOf?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .typeOf(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .typeOf(v)
        }
      }()
      case 81: try {
        var v: Fuzzilli_Protobuf_Void?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .void(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .void(v)
        }
      }()
      case 82: try {
        var v: Fuzzilli_Protobuf_TestInstanceOf?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .testInstanceOf(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .testInstanceOf(v)
        }
      }()
      case 83: try {
        var v: Fuzzilli_Protobuf_TestIn?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .testIn(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .testIn(v)
        }
      }()
      case 84: try {
        var v: Fuzzilli_Protobuf_BeginPlainFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginPlainFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginPlainFunction(v)
        }
      }()
      case 85: try {
        var v: Fuzzilli_Protobuf_EndPlainFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endPlainFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endPlainFunction(v)
        }
      }()
      case 86: try {
        var v: Fuzzilli_Protobuf_BeginArrowFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginArrowFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginArrowFunction(v)
        }
      }()
      case 87: try {
        var v: Fuzzilli_Protobuf_EndArrowFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endArrowFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endArrowFunction(v)
        }
      }()
      case 88: try {
        var v: Fuzzilli_Protobuf_BeginGeneratorFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginGeneratorFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginGeneratorFunction(v)
        }
      }()
      case 89: try {
        var v: Fuzzilli_Protobuf_EndGeneratorFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endGeneratorFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endGeneratorFunction(v)
        }
      }()
      case 90: try {
        var v: Fuzzilli_Protobuf_BeginAsyncFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginAsyncFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginAsyncFunction(v)
        }
      }()
      case 91: try {
        var v: Fuzzilli_Protobuf_EndAsyncFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endAsyncFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endAsyncFunction(v)
        }
      }()
      case 92: try {
        var v: Fuzzilli_Protobuf_BeginAsyncArrowFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginAsyncArrowFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginAsyncArrowFunction(v)
        }
      }()
      case 93: try {
        var v: Fuzzilli_Protobuf_EndAsyncArrowFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endAsyncArrowFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endAsyncArrowFunction(v)
        }
      }()
      case 94: try {
        var v: Fuzzilli_Protobuf_BeginAsyncGeneratorFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginAsyncGeneratorFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginAsyncGeneratorFunction(v)
        }
      }()
      case 95: try {
        var v: Fuzzilli_Protobuf_EndAsyncGeneratorFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endAsyncGeneratorFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endAsyncGeneratorFunction(v)
        }
      }()
      case 96: try {
        var v: Fuzzilli_Protobuf_BeginConstructor?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginConstructor(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginConstructor(v)
        }
      }()
      case 97: try {
        var v: Fuzzilli_Protobuf_EndConstructor?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endConstructor(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endConstructor(v)
        }
      }()
      case 98: try {
        var v: Fuzzilli_Protobuf_Return?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .return(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .return(v)
        }
      }()
      case 99: try {
        var v: Fuzzilli_Protobuf_Yield?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .yield(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .yield(v)
        }
      }()
      case 100: try {
        var v: Fuzzilli_Protobuf_YieldEach?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .yieldEach(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .yieldEach(v)
        }
      }()
      case 101: try {
        var v: Fuzzilli_Protobuf_Await?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .await(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .await(v)
        }
      }()
      case 102: try {
        var v: Fuzzilli_Protobuf_CallFunction?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .callFunction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .callFunction(v)
        }
      }()
      case 103: try {
        var v: Fuzzilli_Protobuf_CallFunctionWithSpread?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .callFunctionWithSpread(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .callFunctionWithSpread(v)
        }
      }()
      case 104: try {
        var v: Fuzzilli_Protobuf_Construct?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .construct(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .construct(v)
        }
      }()
      case 105: try {
        var v: Fuzzilli_Protobuf_ConstructWithSpread?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .constructWithSpread(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .constructWithSpread(v)
        }
      }()
      case 106: try {
        var v: Fuzzilli_Protobuf_CallMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .callMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .callMethod(v)
        }
      }()
      case 107: try {
        var v: Fuzzilli_Protobuf_CallMethodWithSpread?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .callMethodWithSpread(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .callMethodWithSpread(v)
        }
      }()
      case 108: try {
        var v: Fuzzilli_Protobuf_CallComputedMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .callComputedMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .callComputedMethod(v)
        }
      }()
      case 109: try {
        var v: Fuzzilli_Protobuf_CallComputedMethodWithSpread?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .callComputedMethodWithSpread(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .callComputedMethodWithSpread(v)
        }
      }()
      case 110: try {
        var v: Fuzzilli_Protobuf_UnaryOperation?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .unaryOperation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .unaryOperation(v)
        }
      }()
      case 111: try {
        var v: Fuzzilli_Protobuf_BinaryOperation?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .binaryOperation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .binaryOperation(v)
        }
      }()
      case 112: try {
        var v: Fuzzilli_Protobuf_TernaryOperation?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .ternaryOperation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .ternaryOperation(v)
        }
      }()
      case 113: try {
        var v: Fuzzilli_Protobuf_Update?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .update(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .update(v)
        }
      }()
      case 114: try {
        var v: Fuzzilli_Protobuf_Dup?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .dup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .dup(v)
        }
      }()
      case 115: try {
        var v: Fuzzilli_Protobuf_Reassign?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .reassign(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .reassign(v)
        }
      }()
      case 116: try {
        var v: Fuzzilli_Protobuf_DestructArray?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .destructArray(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .destructArray(v)
        }
      }()
      case 117: try {
        var v: Fuzzilli_Protobuf_DestructArrayAndReassign?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .destructArrayAndReassign(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .destructArrayAndReassign(v)
        }
      }()
      case 118: try {
        var v: Fuzzilli_Protobuf_DestructObject?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .destructObject(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .destructObject(v)
        }
      }()
      case 119: try {
        var v: Fuzzilli_Protobuf_DestructObjectAndReassign?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .destructObjectAndReassign(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .destructObjectAndReassign(v)
        }
      }()
      case 120: try {
        var v: Fuzzilli_Protobuf_Compare?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .compare(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .compare(v)
        }
      }()
      case 121: try {
        var v: Fuzzilli_Protobuf_LoadNamedVariable?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadNamedVariable(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadNamedVariable(v)
        }
      }()
      case 122: try {
        var v: Fuzzilli_Protobuf_StoreNamedVariable?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .storeNamedVariable(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .storeNamedVariable(v)
        }
      }()
      case 123: try {
        var v: Fuzzilli_Protobuf_DefineNamedVariable?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .defineNamedVariable(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .defineNamedVariable(v)
        }
      }()
      case 124: try {
        var v: Fuzzilli_Protobuf_Eval?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .eval(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .eval(v)
        }
      }()
      case 125: try {
        var v: Fuzzilli_Protobuf_BeginWith?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginWith(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginWith(v)
        }
      }()
      case 126: try {
        var v: Fuzzilli_Protobuf_EndWith?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endWith(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endWith(v)
        }
      }()
      case 127: try {
        var v: Fuzzilli_Protobuf_CallSuperConstructor?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .callSuperConstructor(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .callSuperConstructor(v)
        }
      }()
      case 128: try {
        var v: Fuzzilli_Protobuf_CallSuperMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .callSuperMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .callSuperMethod(v)
        }
      }()
      case 129: try {
        var v: Fuzzilli_Protobuf_GetPrivateProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .getPrivateProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .getPrivateProperty(v)
        }
      }()
      case 130: try {
        var v: Fuzzilli_Protobuf_SetPrivateProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .setPrivateProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .setPrivateProperty(v)
        }
      }()
      case 131: try {
        var v: Fuzzilli_Protobuf_UpdatePrivateProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .updatePrivateProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .updatePrivateProperty(v)
        }
      }()
      case 132: try {
        var v: Fuzzilli_Protobuf_CallPrivateMethod?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .callPrivateMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .callPrivateMethod(v)
        }
      }()
      case 133: try {
        var v: Fuzzilli_Protobuf_GetSuperProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .getSuperProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .getSuperProperty(v)
        }
      }()
      case 134: try {
        var v: Fuzzilli_Protobuf_SetSuperProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .setSuperProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .setSuperProperty(v)
        }
      }()
      case 135: try {
        var v: Fuzzilli_Protobuf_GetComputedSuperProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .getComputedSuperProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .getComputedSuperProperty(v)
        }
      }()
      case 136: try {
        var v: Fuzzilli_Protobuf_SetComputedSuperProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .setComputedSuperProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .setComputedSuperProperty(v)
        }
      }()
      case 137: try {
        var v: Fuzzilli_Protobuf_UpdateSuperProperty?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .updateSuperProperty(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .updateSuperProperty(v)
        }
      }()
      case 138: try {
        var v: Fuzzilli_Protobuf_BeginIf?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginIf(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginIf(v)
        }
      }()
      case 139: try {
        var v: Fuzzilli_Protobuf_BeginElse?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginElse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginElse(v)
        }
      }()
      case 140: try {
        var v: Fuzzilli_Protobuf_EndIf?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endIf(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endIf(v)
        }
      }()
      case 141: try {
        var v: Fuzzilli_Protobuf_BeginWhileLoopHeader?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginWhileLoopHeader(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginWhileLoopHeader(v)
        }
      }()
      case 142: try {
        var v: Fuzzilli_Protobuf_BeginWhileLoopBody?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginWhileLoopBody(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginWhileLoopBody(v)
        }
      }()
      case 143: try {
        var v: Fuzzilli_Protobuf_EndWhileLoop?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endWhileLoop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endWhileLoop(v)
        }
      }()
      case 144: try {
        var v: Fuzzilli_Protobuf_BeginDoWhileLoopBody?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginDoWhileLoopBody(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginDoWhileLoopBody(v)
        }
      }()
      case 145: try {
        var v: Fuzzilli_Protobuf_BeginDoWhileLoopHeader?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginDoWhileLoopHeader(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginDoWhileLoopHeader(v)
        }
      }()
      case 146: try {
        var v: Fuzzilli_Protobuf_EndDoWhileLoop?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endDoWhileLoop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endDoWhileLoop(v)
        }
      }()
      case 147: try {
        var v: Fuzzilli_Protobuf_BeginForLoopInitializer?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginForLoopInitializer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginForLoopInitializer(v)
        }
      }()
      case 148: try {
        var v: Fuzzilli_Protobuf_BeginForLoopCondition?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginForLoopCondition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginForLoopCondition(v)
        }
      }()
      case 149: try {
        var v: Fuzzilli_Protobuf_BeginForLoopAfterthought?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginForLoopAfterthought(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginForLoopAfterthought(v)
        }
      }()
      case 150: try {
        var v: Fuzzilli_Protobuf_BeginForLoopBody?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginForLoopBody(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginForLoopBody(v)
        }
      }()
      case 151: try {
        var v: Fuzzilli_Protobuf_EndForLoop?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endForLoop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endForLoop(v)
        }
      }()
      case 152: try {
        var v: Fuzzilli_Protobuf_BeginForInLoop?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginForInLoop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginForInLoop(v)
        }
      }()
      case 153: try {
        var v: Fuzzilli_Protobuf_EndForInLoop?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endForInLoop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endForInLoop(v)
        }
      }()
      case 154: try {
        var v: Fuzzilli_Protobuf_BeginForOfLoop?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginForOfLoop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginForOfLoop(v)
        }
      }()
      case 155: try {
        var v: Fuzzilli_Protobuf_BeginForOfLoopWithDestruct?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginForOfLoopWithDestruct(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginForOfLoopWithDestruct(v)
        }
      }()
      case 156: try {
        var v: Fuzzilli_Protobuf_EndForOfLoop?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endForOfLoop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endForOfLoop(v)
        }
      }()
      case 157: try {
        var v: Fuzzilli_Protobuf_BeginRepeatLoop?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginRepeatLoop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginRepeatLoop(v)
        }
      }()
      case 158: try {
        var v: Fuzzilli_Protobuf_EndRepeatLoop?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endRepeatLoop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endRepeatLoop(v)
        }
      }()
      case 159: try {
        var v: Fuzzilli_Protobuf_LoopBreak?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loopBreak(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loopBreak(v)
        }
      }()
      case 160: try {
        var v: Fuzzilli_Protobuf_LoopContinue?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loopContinue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loopContinue(v)
        }
      }()
      case 161: try {
        var v: Fuzzilli_Protobuf_BeginTry?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginTry(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginTry(v)
        }
      }()
      case 162: try {
        var v: Fuzzilli_Protobuf_BeginCatch?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginCatch(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginCatch(v)
        }
      }()
      case 163: try {
        var v: Fuzzilli_Protobuf_BeginFinally?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginFinally(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginFinally(v)
        }
      }()
      case 164: try {
        var v: Fuzzilli_Protobuf_EndTryCatchFinally?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endTryCatchFinally(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endTryCatchFinally(v)
        }
      }()
      case 165: try {
        var v: Fuzzilli_Protobuf_ThrowException?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .throwException(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .throwException(v)
        }
      }()
      case 166: try {
        var v: Fuzzilli_Protobuf_BeginCodeString?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginCodeString(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginCodeString(v)
        }
      }()
      case 167: try {
        var v: Fuzzilli_Protobuf_EndCodeString?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endCodeString(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endCodeString(v)
        }
      }()
      case 168: try {
        var v: Fuzzilli_Protobuf_BeginBlockStatement?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginBlockStatement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginBlockStatement(v)
        }
      }()
      case 169: try {
        var v: Fuzzilli_Protobuf_EndBlockStatement?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endBlockStatement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endBlockStatement(v)
        }
      }()
      case 170: try {
        var v: Fuzzilli_Protobuf_BeginSwitch?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginSwitch(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginSwitch(v)
        }
      }()
      case 171: try {
        var v: Fuzzilli_Protobuf_BeginSwitchCase?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginSwitchCase(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginSwitchCase(v)
        }
      }()
      case 172: try {
        var v: Fuzzilli_Protobuf_BeginSwitchDefaultCase?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .beginSwitchDefaultCase(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .beginSwitchDefaultCase(v)
        }
      }()
      case 173: try {
        var v: Fuzzilli_Protobuf_EndSwitchCase?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endSwitchCase(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endSwitchCase(v)
        }
      }()
      case 174: try {
        var v: Fuzzilli_Protobuf_EndSwitch?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .endSwitch(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .endSwitch(v)
        }
      }()
      case 175: try {
        var v: Fuzzilli_Protobuf_SwitchBreak?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .switchBreak(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .switchBreak(v)
        }
      }()
      case 176: try {
        var v: Fuzzilli_Protobuf_LoadNewTarget?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loadNewTarget(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loadNewTarget(v)
        }
      }()
      case 177: try {
        var v: Fuzzilli_Protobuf_Print?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .print(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .print(v)
        }
      }()
      case 178: try {
        var v: Fuzzilli_Protobuf_Explore?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .explore(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .explore(v)
        }
      }()
      case 179: try {
        var v: Fuzzilli_Protobuf_Probe?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .probe(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .probe(v)
        }
      }()
      case 180: try {
        var v: Fuzzilli_Protobuf_Fixup?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .fixup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .fixup(v)
        }
      }()
      case 181: try {
        var v: Fuzzilli_Protobuf_LoopBreakNested?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loopBreakNested(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loopBreakNested(v)
        }
      }()
      case 182: try {
        var v: Fuzzilli_Protobuf_LoopContinueNested?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .loopContinueNested(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .loopContinueNested(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.inouts.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.inouts, fieldNumber: 1)
    }
    switch self.operation {
    case .opIdx?: try {
      guard case .opIdx(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }()
    case .nop?: try {
      guard case .nop(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .loadInteger?: try {
      guard case .loadInteger(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .loadBigInt?: try {
      guard case .loadBigInt(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .loadFloat?: try {
      guard case .loadFloat(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .loadString?: try {
      guard case .loadString(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .loadBoolean?: try {
      guard case .loadBoolean(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .loadUndefined?: try {
      guard case .loadUndefined(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .loadNull?: try {
      guard case .loadNull(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .loadThis?: try {
      guard case .loadThis(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .loadArguments?: try {
      guard case .loadArguments(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .loadRegExp?: try {
      guard case .loadRegExp(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .beginObjectLiteral?: try {
      guard case .beginObjectLiteral(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .objectLiteralAddProperty?: try {
      guard case .objectLiteralAddProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .objectLiteralAddElement?: try {
      guard case .objectLiteralAddElement(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .objectLiteralAddComputedProperty?: try {
      guard case .objectLiteralAddComputedProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .objectLiteralCopyProperties?: try {
      guard case .objectLiteralCopyProperties(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .objectLiteralSetPrototype?: try {
      guard case .objectLiteralSetPrototype(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .beginObjectLiteralMethod?: try {
      guard case .beginObjectLiteralMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .endObjectLiteralMethod?: try {
      guard case .endObjectLiteralMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case .beginObjectLiteralComputedMethod?: try {
      guard case .beginObjectLiteralComputedMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    }()
    case .endObjectLiteralComputedMethod?: try {
      guard case .endObjectLiteralComputedMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
    }()
    case .beginObjectLiteralGetter?: try {
      guard case .beginObjectLiteralGetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
    }()
    case .endObjectLiteralGetter?: try {
      guard case .endObjectLiteralGetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
    }()
    case .beginObjectLiteralSetter?: try {
      guard case .beginObjectLiteralSetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
    }()
    case .endObjectLiteralSetter?: try {
      guard case .endObjectLiteralSetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
    }()
    case .endObjectLiteral?: try {
      guard case .endObjectLiteral(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
    }()
    case .beginClassDefinition?: try {
      guard case .beginClassDefinition(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
    }()
    case .beginClassConstructor?: try {
      guard case .beginClassConstructor(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
    }()
    case .endClassConstructor?: try {
      guard case .endClassConstructor(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
    }()
    case .classAddInstanceProperty?: try {
      guard case .classAddInstanceProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
    }()
    case .classAddInstanceElement?: try {
      guard case .classAddInstanceElement(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
    }()
    case .classAddInstanceComputedProperty?: try {
      guard case .classAddInstanceComputedProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
    }()
    case .beginClassInstanceMethod?: try {
      guard case .beginClassInstanceMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
    }()
    case .endClassInstanceMethod?: try {
      guard case .endClassInstanceMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
    }()
    case .beginClassInstanceGetter?: try {
      guard case .beginClassInstanceGetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
    }()
    case .endClassInstanceGetter?: try {
      guard case .endClassInstanceGetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
    }()
    case .beginClassInstanceSetter?: try {
      guard case .beginClassInstanceSetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
    }()
    case .endClassInstanceSetter?: try {
      guard case .endClassInstanceSetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
    }()
    case .classAddStaticProperty?: try {
      guard case .classAddStaticProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
    }()
    case .classAddStaticElement?: try {
      guard case .classAddStaticElement(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 42)
    }()
    case .classAddStaticComputedProperty?: try {
      guard case .classAddStaticComputedProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
    }()
    case .beginClassStaticInitializer?: try {
      guard case .beginClassStaticInitializer(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
    }()
    case .endClassStaticInitializer?: try {
      guard case .endClassStaticInitializer(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
    }()
    case .beginClassStaticMethod?: try {
      guard case .beginClassStaticMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 46)
    }()
    case .endClassStaticMethod?: try {
      guard case .endClassStaticMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
    }()
    case .beginClassStaticGetter?: try {
      guard case .beginClassStaticGetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 48)
    }()
    case .endClassStaticGetter?: try {
      guard case .endClassStaticGetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
    }()
    case .beginClassStaticSetter?: try {
      guard case .beginClassStaticSetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
    }()
    case .endClassStaticSetter?: try {
      guard case .endClassStaticSetter(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
    }()
    case .classAddPrivateInstanceProperty?: try {
      guard case .classAddPrivateInstanceProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
    }()
    case .beginClassPrivateInstanceMethod?: try {
      guard case .beginClassPrivateInstanceMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
    }()
    case .endClassPrivateInstanceMethod?: try {
      guard case .endClassPrivateInstanceMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
    }()
    case .classAddPrivateStaticProperty?: try {
      guard case .classAddPrivateStaticProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 55)
    }()
    case .beginClassPrivateStaticMethod?: try {
      guard case .beginClassPrivateStaticMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
    }()
    case .endClassPrivateStaticMethod?: try {
      guard case .endClassPrivateStaticMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
    }()
    case .endClassDefinition?: try {
      guard case .endClassDefinition(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 58)
    }()
    case .createArray?: try {
      guard case .createArray(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 59)
    }()
    case .createIntArray?: try {
      guard case .createIntArray(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
    }()
    case .createFloatArray?: try {
      guard case .createFloatArray(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
    }()
    case .createArrayWithSpread?: try {
      guard case .createArrayWithSpread(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
    }()
    case .createTemplateString?: try {
      guard case .createTemplateString(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 63)
    }()
    case .loadBuiltin?: try {
      guard case .loadBuiltin(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 64)
    }()
    case .getProperty?: try {
      guard case .getProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 65)
    }()
    case .setProperty?: try {
      guard case .setProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 66)
    }()
    case .updateProperty?: try {
      guard case .updateProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 67)
    }()
    case .deleteProperty?: try {
      guard case .deleteProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 68)
    }()
    case .configureProperty?: try {
      guard case .configureProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 69)
    }()
    case .getElement?: try {
      guard case .getElement(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 70)
    }()
    case .setElement?: try {
      guard case .setElement(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 71)
    }()
    case .updateElement?: try {
      guard case .updateElement(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 72)
    }()
    case .deleteElement?: try {
      guard case .deleteElement(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 73)
    }()
    case .configureElement?: try {
      guard case .configureElement(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 74)
    }()
    case .getComputedProperty?: try {
      guard case .getComputedProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 75)
    }()
    case .setComputedProperty?: try {
      guard case .setComputedProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 76)
    }()
    case .updateComputedProperty?: try {
      guard case .updateComputedProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 77)
    }()
    case .deleteComputedProperty?: try {
      guard case .deleteComputedProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 78)
    }()
    case .configureComputedProperty?: try {
      guard case .configureComputedProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 79)
    }()
    case .typeOf?: try {
      guard case .typeOf(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 80)
    }()
    case .void?: try {
      guard case .void(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 81)
    }()
    case .testInstanceOf?: try {
      guard case .testInstanceOf(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 82)
    }()
    case .testIn?: try {
      guard case .testIn(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 83)
    }()
    case .beginPlainFunction?: try {
      guard case .beginPlainFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 84)
    }()
    case .endPlainFunction?: try {
      guard case .endPlainFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 85)
    }()
    case .beginArrowFunction?: try {
      guard case .beginArrowFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 86)
    }()
    case .endArrowFunction?: try {
      guard case .endArrowFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 87)
    }()
    case .beginGeneratorFunction?: try {
      guard case .beginGeneratorFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 88)
    }()
    case .endGeneratorFunction?: try {
      guard case .endGeneratorFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 89)
    }()
    case .beginAsyncFunction?: try {
      guard case .beginAsyncFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 90)
    }()
    case .endAsyncFunction?: try {
      guard case .endAsyncFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 91)
    }()
    case .beginAsyncArrowFunction?: try {
      guard case .beginAsyncArrowFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 92)
    }()
    case .endAsyncArrowFunction?: try {
      guard case .endAsyncArrowFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 93)
    }()
    case .beginAsyncGeneratorFunction?: try {
      guard case .beginAsyncGeneratorFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 94)
    }()
    case .endAsyncGeneratorFunction?: try {
      guard case .endAsyncGeneratorFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 95)
    }()
    case .beginConstructor?: try {
      guard case .beginConstructor(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 96)
    }()
    case .endConstructor?: try {
      guard case .endConstructor(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 97)
    }()
    case .return?: try {
      guard case .return(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    }()
    case .yield?: try {
      guard case .yield(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    }()
    case .yieldEach?: try {
      guard case .yieldEach(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    }()
    case .await?: try {
      guard case .await(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
    }()
    case .callFunction?: try {
      guard case .callFunction(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
    }()
    case .callFunctionWithSpread?: try {
      guard case .callFunctionWithSpread(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
    }()
    case .construct?: try {
      guard case .construct(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
    }()
    case .constructWithSpread?: try {
      guard case .constructWithSpread(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
    }()
    case .callMethod?: try {
      guard case .callMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
    }()
    case .callMethodWithSpread?: try {
      guard case .callMethodWithSpread(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
    }()
    case .callComputedMethod?: try {
      guard case .callComputedMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
    }()
    case .callComputedMethodWithSpread?: try {
      guard case .callComputedMethodWithSpread(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 109)
    }()
    case .unaryOperation?: try {
      guard case .unaryOperation(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
    }()
    case .binaryOperation?: try {
      guard case .binaryOperation(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 111)
    }()
    case .ternaryOperation?: try {
      guard case .ternaryOperation(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
    }()
    case .update?: try {
      guard case .update(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 113)
    }()
    case .dup?: try {
      guard case .dup(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 114)
    }()
    case .reassign?: try {
      guard case .reassign(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
    }()
    case .destructArray?: try {
      guard case .destructArray(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 116)
    }()
    case .destructArrayAndReassign?: try {
      guard case .destructArrayAndReassign(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 117)
    }()
    case .destructObject?: try {
      guard case .destructObject(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 118)
    }()
    case .destructObjectAndReassign?: try {
      guard case .destructObjectAndReassign(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 119)
    }()
    case .compare?: try {
      guard case .compare(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 120)
    }()
    case .loadNamedVariable?: try {
      guard case .loadNamedVariable(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 121)
    }()
    case .storeNamedVariable?: try {
      guard case .storeNamedVariable(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 122)
    }()
    case .defineNamedVariable?: try {
      guard case .defineNamedVariable(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 123)
    }()
    case .eval?: try {
      guard case .eval(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 124)
    }()
    case .beginWith?: try {
      guard case .beginWith(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 125)
    }()
    case .endWith?: try {
      guard case .endWith(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 126)
    }()
    case .callSuperConstructor?: try {
      guard case .callSuperConstructor(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 127)
    }()
    case .callSuperMethod?: try {
      guard case .callSuperMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 128)
    }()
    case .getPrivateProperty?: try {
      guard case .getPrivateProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 129)
    }()
    case .setPrivateProperty?: try {
      guard case .setPrivateProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 130)
    }()
    case .updatePrivateProperty?: try {
      guard case .updatePrivateProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 131)
    }()
    case .callPrivateMethod?: try {
      guard case .callPrivateMethod(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 132)
    }()
    case .getSuperProperty?: try {
      guard case .getSuperProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 133)
    }()
    case .setSuperProperty?: try {
      guard case .setSuperProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 134)
    }()
    case .getComputedSuperProperty?: try {
      guard case .getComputedSuperProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 135)
    }()
    case .setComputedSuperProperty?: try {
      guard case .setComputedSuperProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 136)
    }()
    case .updateSuperProperty?: try {
      guard case .updateSuperProperty(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 137)
    }()
    case .beginIf?: try {
      guard case .beginIf(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 138)
    }()
    case .beginElse?: try {
      guard case .beginElse(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 139)
    }()
    case .endIf?: try {
      guard case .endIf(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 140)
    }()
    case .beginWhileLoopHeader?: try {
      guard case .beginWhileLoopHeader(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 141)
    }()
    case .beginWhileLoopBody?: try {
      guard case .beginWhileLoopBody(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 142)
    }()
    case .endWhileLoop?: try {
      guard case .endWhileLoop(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 143)
    }()
    case .beginDoWhileLoopBody?: try {
      guard case .beginDoWhileLoopBody(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 144)
    }()
    case .beginDoWhileLoopHeader?: try {
      guard case .beginDoWhileLoopHeader(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 145)
    }()
    case .endDoWhileLoop?: try {
      guard case .endDoWhileLoop(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 146)
    }()
    case .beginForLoopInitializer?: try {
      guard case .beginForLoopInitializer(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 147)
    }()
    case .beginForLoopCondition?: try {
      guard case .beginForLoopCondition(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 148)
    }()
    case .beginForLoopAfterthought?: try {
      guard case .beginForLoopAfterthought(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 149)
    }()
    case .beginForLoopBody?: try {
      guard case .beginForLoopBody(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 150)
    }()
    case .endForLoop?: try {
      guard case .endForLoop(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 151)
    }()
    case .beginForInLoop?: try {
      guard case .beginForInLoop(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 152)
    }()
    case .endForInLoop?: try {
      guard case .endForInLoop(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 153)
    }()
    case .beginForOfLoop?: try {
      guard case .beginForOfLoop(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 154)
    }()
    case .beginForOfLoopWithDestruct?: try {
      guard case .beginForOfLoopWithDestruct(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 155)
    }()
    case .endForOfLoop?: try {
      guard case .endForOfLoop(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 156)
    }()
    case .beginRepeatLoop?: try {
      guard case .beginRepeatLoop(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 157)
    }()
    case .endRepeatLoop?: try {
      guard case .endRepeatLoop(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 158)
    }()
    case .loopBreak?: try {
      guard case .loopBreak(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 159)
    }()
    case .loopContinue?: try {
      guard case .loopContinue(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 160)
    }()
    case .beginTry?: try {
      guard case .beginTry(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 161)
    }()
    case .beginCatch?: try {
      guard case .beginCatch(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 162)
    }()
    case .beginFinally?: try {
      guard case .beginFinally(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 163)
    }()
    case .endTryCatchFinally?: try {
      guard case .endTryCatchFinally(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 164)
    }()
    case .throwException?: try {
      guard case .throwException(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 165)
    }()
    case .beginCodeString?: try {
      guard case .beginCodeString(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 166)
    }()
    case .endCodeString?: try {
      guard case .endCodeString(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 167)
    }()
    case .beginBlockStatement?: try {
      guard case .beginBlockStatement(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 168)
    }()
    case .endBlockStatement?: try {
      guard case .endBlockStatement(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 169)
    }()
    case .beginSwitch?: try {
      guard case .beginSwitch(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 170)
    }()
    case .beginSwitchCase?: try {
      guard case .beginSwitchCase(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 171)
    }()
    case .beginSwitchDefaultCase?: try {
      guard case .beginSwitchDefaultCase(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 172)
    }()
    case .endSwitchCase?: try {
      guard case .endSwitchCase(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 173)
    }()
    case .endSwitch?: try {
      guard case .endSwitch(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 174)
    }()
    case .switchBreak?: try {
      guard case .switchBreak(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 175)
    }()
    case .loadNewTarget?: try {
      guard case .loadNewTarget(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 176)
    }()
    case .print?: try {
      guard case .print(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 177)
    }()
    case .explore?: try {
      guard case .explore(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 178)
    }()
    case .probe?: try {
      guard case .probe(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 179)
    }()
    case .fixup?: try {
      guard case .fixup(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 180)
    }()
    case .loopBreakNested?: try {
      guard case .loopBreakNested(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 181)
    }()
    case .loopContinueNested?: try {
      guard case .loopContinueNested(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 182)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuzzilli_Protobuf_Instruction, rhs: Fuzzilli_Protobuf_Instruction) -> Bool {
    if lhs.inouts != rhs.inouts {return false}
    if lhs.operation != rhs.operation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuzzilli_Protobuf_Program: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Program"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "code"),
    3: .same(proto: "comments"),
    4: .same(proto: "parent"),
  ]

  fileprivate class _StorageClass {
    var _uuid: Data = Data()
    var _code: [Fuzzilli_Protobuf_Instruction] = []
    var _comments: Dictionary<Int32,String> = [:]
    var _parent: Fuzzilli_Protobuf_Program? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _code = source._code
      _comments = source._comments
      _parent = source._parent
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBytesField(value: &_storage._uuid) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._code) }()
        case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufString>.self, value: &_storage._comments) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._parent) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._uuid, fieldNumber: 1)
      }
      if !_storage._code.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._comments.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufString>.self, value: _storage._comments, fieldNumber: 3)
      }
      try { if let v = _storage._parent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuzzilli_Protobuf_Program, rhs: Fuzzilli_Protobuf_Program) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._comments != rhs_storage._comments {return false}
        if _storage._parent != rhs_storage._parent {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
