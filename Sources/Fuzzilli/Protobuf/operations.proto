// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package fuzzilli.protobuf;

// Parameters used by function definitions, not an operation by itself.
message Parameters {
    uint32 count = 1;
    bool hasRest = 2;
    // If provided, specifies the explicit structure of the parameters.
    // When omitted, the parameters are assumed to be plain identifiers.
    repeated Parameter patterns = 3;
}

message Parameter {
    oneof pattern {
        IdentifierParameter identifierParameter = 1;
        ObjectParameter objectParameter = 2;
        ArrayParameter arrayParameter = 3;
        RestParameter restParameter = 4;
    }
}

message IdentifierParameter {
    string name = 1;
}

message ObjectParameter {
    repeated ObjectParameterProperty parameters = 1;
}

message ObjectParameterProperty {
    string parameterKey = 1;
    Parameter parameterValue = 2;
}

message ArrayParameter {
    repeated Parameter elements = 1;
}

message RestParameter {
    Parameter argument = 1;
}

message LoadInteger {
    int64 value = 1;
}

message LoadBigInt {
    int64 value = 1;
}

message LoadFloat {
    double value = 1;
}

message LoadString {
    string value = 1;
}

message LoadBoolean {
    bool value = 1;
}

message LoadUndefined {
}

message LoadNull {
}

message LoadThis {
}

message LoadArguments {
}

message LoadDisposableVariable {
}

message LoadAsyncDisposableVariable {
}

message LoadRegExp {
    string pattern = 1;
    uint32 flags = 2;
}

message BeginObjectLiteral {
}

message ObjectLiteralAddProperty {
    string propertyName = 1;
}

message ObjectLiteralAddElement {
    int64 index = 1;
}

message ObjectLiteralAddComputedProperty {
}

message ObjectLiteralCopyProperties {
}

message ObjectLiteralSetPrototype {
}

message BeginObjectLiteralMethod {
    string methodName = 1;
    Parameters parameters = 2;
}

message EndObjectLiteralMethod {
}

message BeginObjectLiteralComputedMethod {
    Parameters parameters = 1;
}

message EndObjectLiteralComputedMethod {
}

message BeginObjectLiteralGetter {
    string propertyName = 1;
}

message EndObjectLiteralGetter {
}

message BeginObjectLiteralSetter {
    string propertyName = 1;
}

message EndObjectLiteralSetter {
}

message EndObjectLiteral {
}

message BeginClassDefinition {
    bool hasSuperclass = 1;
}

message BeginClassConstructor {
    Parameters parameters = 1;
}

message EndClassConstructor {
}

message ClassAddInstanceProperty {
    string propertyName = 1;
    bool hasValue = 2;
}

message ClassAddInstanceElement {
    int64 index = 1;
    bool hasValue = 2;
}

message ClassAddInstanceComputedProperty {
    bool hasValue = 1;
}

message BeginClassInstanceMethod {
    string methodName = 1;
    Parameters parameters = 2;
}

message EndClassInstanceMethod {
}

message BeginClassInstanceGetter {
    string propertyName = 1;
}

message EndClassInstanceGetter {
}

message BeginClassInstanceSetter {
    string propertyName = 1;
}

message EndClassInstanceSetter {
}

message ClassAddStaticProperty {
    string propertyName = 1;
    bool hasValue = 2;
}

message ClassAddStaticElement {
    int64 index = 1;
    bool hasValue = 2;
}

message ClassAddStaticComputedProperty {
    bool hasValue = 1;
}

message BeginClassStaticInitializer {
}

message EndClassStaticInitializer {
}

message BeginClassStaticMethod {
    string methodName = 1;
    Parameters parameters = 2;
}

message EndClassStaticMethod {
}

message BeginClassStaticGetter {
    string propertyName = 1;
}

message EndClassStaticGetter {
}

message BeginClassStaticSetter {
    string propertyName = 1;
}

message EndClassStaticSetter {
}

message ClassAddPrivateInstanceProperty {
    string propertyName = 1;
    bool hasValue = 2;
}

message BeginClassPrivateInstanceMethod {
    string methodName = 1;
    Parameters parameters = 2;
}

message EndClassPrivateInstanceMethod {
}

message ClassAddPrivateStaticProperty {
    string propertyName = 1;
    bool hasValue = 2;
}

message BeginClassPrivateStaticMethod {
    string methodName = 1;
    Parameters parameters = 2;
}

message EndClassPrivateStaticMethod {
}

message EndClassDefinition {
}

message CreateArray {
}

message CreateIntArray {
    repeated int64 values = 1;
}

message CreateFloatArray {
    repeated double values = 1;
}

message CreateTemplateString {
    repeated string parts = 1;
}

message CreateArrayWithSpread {
    repeated bool spreads = 1;
}

message GetProperty {
    string propertyName = 1;
    bool isGuarded = 2;
}

message SetProperty {
    string propertyName = 1;
}

message UpdateProperty {
    string propertyName = 1;
    BinaryOperator op = 2;
}

message DeleteProperty {
    string propertyName = 1;
    bool isGuarded = 2;
}

enum PropertyType {
    VALUE = 0;
    GETTER = 1;
    SETTER = 2;
    GETTERSETTER = 3;
}

message ConfigureProperty {
    string propertyName = 1;
    bool isWritable = 2;
    bool isConfigurable = 3;
    bool isEnumerable = 4;
    PropertyType type = 5;
}

message GetElement {
    int64 index = 1;
    bool isGuarded = 2;
}

message SetElement {
    int64 index = 1;
}

message UpdateElement {
    int64 index = 1;
    BinaryOperator op = 2;
}

message DeleteElement {
    int64 index = 1;
    bool isGuarded = 2;
}

message ConfigureElement {
    int64 index = 1;
    bool isWritable = 2;
    bool isConfigurable = 3;
    bool isEnumerable = 4;
    PropertyType type = 5;
}

message GetComputedProperty {
    bool isGuarded = 1;
}

message SetComputedProperty {
}

message UpdateComputedProperty {
    BinaryOperator op = 1;
}

message DeleteComputedProperty {
    bool isGuarded = 1;
}

message ConfigureComputedProperty {
    bool isWritable = 1;
    bool isConfigurable = 2;
    bool isEnumerable = 3;
    PropertyType type = 4;
}

message TypeOf {
}

message Void {
}

message TestInstanceOf {
}

message TestIn {
}

message BeginPlainFunction {
    Parameters parameters = 1;
    // Can be missing, in which case the name is auto-assigned.
    string name = 2;
}

message EndPlainFunction {
}

message BeginArrowFunction {
    Parameters parameters = 1;
}

message EndArrowFunction {
}

message BeginGeneratorFunction {
    Parameters parameters = 1;
    // Can be missing, in which case the name is auto-assigned.
    string name = 2;
}

message EndGeneratorFunction {
}

message BeginAsyncFunction {
    Parameters parameters = 1;
    // Can be missing, in which case the name is auto-assigned.
    string name = 2;
}

message EndAsyncFunction {
}

message BeginAsyncArrowFunction {
    Parameters parameters = 1;
}

message EndAsyncArrowFunction {
}

message BeginAsyncGeneratorFunction {
    Parameters parameters = 1;
    // Can be missing, in which case the name is auto-assigned.
    string name = 2;
}

message EndAsyncGeneratorFunction {
}

message BeginConstructor {
    Parameters parameters = 1;
}

message EndConstructor {
}

message Directive {
    string content = 1;
}

message Return {
}

message Yield {
}

message YieldEach {
}

message Await {
}

message CallFunction {
    bool isGuarded = 1;
}

message CallFunctionWithSpread {
    repeated bool spreads = 1;
    bool isGuarded = 2;
}

message Construct {
    bool isGuarded = 1;
}

message ConstructWithSpread {
    repeated bool spreads = 1;
    bool isGuarded = 2;
}

message CallMethod {
    string methodName = 1;
    bool isGuarded = 2;
}

message CallMethodWithSpread {
    string methodName = 1;
    repeated bool spreads = 2;
    bool isGuarded = 3;
}

message CallComputedMethod {
    bool isGuarded = 1;
}

message CallComputedMethodWithSpread {
    repeated bool spreads = 1;
    bool isGuarded = 2;
}

enum UnaryOperator {
    PRE_INC = 0;
    PRE_DEC = 1;
    POST_INC = 2;
    POST_DEC = 3;
    LOGICAL_NOT = 4;
    BITWISE_NOT = 5;
    PLUS = 6;
    MINUS = 7;
}

message UnaryOperation {
    UnaryOperator op = 1;
}

enum BinaryOperator {
    ADD = 0;
    SUB = 1;
    MUL = 2;
    DIV = 3;
    MOD = 4;
    BIT_AND = 5;
    BIT_OR = 6;
    LOGICAL_AND = 7;
    LOGICAL_OR = 8;
    XOR = 9;
    LSHIFT = 10;
    RSHIFT = 11;
    EXP = 12;
    UNRSHIFT = 13;
}

enum WasmIntegerBinaryOperator {
    WASMI_ADD = 0;
    WASMI_SUB = 1;
    WASMI_MUL = 2;
    WASMI_DIV_S = 3;
    WASMI_DIV_U = 4;
    WASMI_REM_S = 5;
    WASMI_REM_U = 6;
    WASMI_AND = 7;
    WASMI_OR = 8;
    WASMI_XOR = 9;
    WASMI_SHL = 10;
    WASMI_SHR_S = 11;
    WASMI_SHR_U = 12;
    WASMI_ROTL = 13;
    WASMI_ROTR = 14;
}

enum WasmIntegerUnaryOperator {
    WASM_CLZ = 0;
    WASM_CTZ = 1;
    WASM_POPCNT = 2;
}

enum WasmFloatBinaryOperator {
    WASMF_ADD = 0;
    WASMF_SUB = 1;
    WASMF_MUL = 2;
    WASMF_DIV = 3;
    WASMF_MIN = 4;
    WASMF_MAX = 5;
    WASMF_COPYSIGN = 6;
}

enum WasmFloatUnaryOperator {
    ABS = 0;
    NEG = 1;
    CEIL = 2;
    FLOOR = 3;
    TRUNC = 4;
    NEAREST = 5;
    SQRT = 6;
}

message BinaryOperation {
    BinaryOperator op = 1;
}

message TernaryOperation {
}

message Update {
    BinaryOperator op = 1;
}

message Dup {
}

message Reassign {
}

message DestructArray {
    repeated int32 indices = 1;
    bool lastIsRest = 2;
}

message DestructArrayAndReassign {
    repeated int32 indices = 1;
    bool lastIsRest = 2;
}

message DestructObject {
    repeated string properties = 1;
    bool hasRestElement = 2;
}

message DestructObjectAndReassign {
    repeated string properties = 1;
    bool hasRestElement = 2;
}

enum Comparator {
    EQUAL = 0;
    STRICT_EQUAL = 1;
    NOT_EQUAL = 2;
    STRICT_NOT_EQUAL = 3;
    LESS_THAN = 4;
    LESS_THAN_OR_EQUAL = 5;
    GREATER_THAN = 6;
    GREATER_THAN_OR_EQUAL = 7;
}

message Compare {
    Comparator op = 1;
}

enum NamedVariableDeclarationMode {
    NONE = 0;
    GLOBAL = 1;
    VAR = 2;
    LET = 3;
}

message CreateNamedVariable {
    string variableName = 1;
    NamedVariableDeclarationMode declarationMode = 2;
}

message Eval {
    string code = 1;
    bool hasOutput = 2;
}

message CallSuperConstructor {
    repeated bool spreads = 1;
}

message CallSuperMethod {
    string methodName = 1;
}

message GetPrivateProperty {
    string propertyName = 1;
}

message SetPrivateProperty {
    string propertyName = 1;
}

message UpdatePrivateProperty {
    string propertyName = 1;
    BinaryOperator op = 2;
}

message CallPrivateMethod {
    string methodName = 1;
}

message GetSuperProperty {
    string propertyName = 1;
}

message SetSuperProperty {
    string propertyName = 1;
}

message GetComputedSuperProperty {
}

message SetComputedSuperProperty {
}

message UpdateSuperProperty {
    string propertyName = 1;
    BinaryOperator op = 2;
}

message LoadNewTarget {
}

message Explore {
    string id = 1;
    int64 rngSeed = 2;
}

message Probe {
    string id = 1;
}

message Fixup {
    string id = 1;
    string action = 2;
    string originalOperation = 3;
    bool hasOutput = 4;
}

message BeginWith {
}

message EndWith {
}

message BeginIf {
    bool inverted = 1;
}

message BeginElse {
}

message EndIf {
}

message BeginSwitch {
}

message BeginSwitchCase {
}

message BeginSwitchDefaultCase {
}

message SwitchBreak {
}

message EndSwitchCase {
    bool fallsThrough = 1;
}

message EndSwitch {
}

message BeginWhileLoopHeader {
}

message BeginWhileLoopBody {
}

message EndWhileLoop {
}

message BeginDoWhileLoopBody {
}

message BeginDoWhileLoopHeader {
}

message EndDoWhileLoop {
}

message BeginForLoopInitializer {
}

message BeginForLoopCondition {
}

message BeginForLoopAfterthought {
}

message BeginForLoopBody {
}

message EndForLoop {
}

message BeginForInLoop {
}

message EndForInLoop {
}

message BeginForOfLoop {
}

message BeginForOfLoopWithDestruct {
    repeated int32 indices = 1;
    bool hasRestElement = 2;
}

message EndForOfLoop {
}

message BeginRepeatLoop {
    int64 iterations = 1;
    bool exposesLoopCounter = 2;
}

message EndRepeatLoop {
}

message LoopBreak {
}

message LoopContinue {
}

message BeginTry {
}

message BeginCatch {
}

message BeginFinally {
}

message EndTryCatchFinally {
}

message ThrowException {
}

message BeginCodeString {
}

message EndCodeString {
}

message BeginBlockStatement {
}

message EndBlockStatement {
}

message Nop {
}

message Print {
}

message BeginWasmModule {
}

message EndWasmModule {
}

message CreateWasmGlobal {
  WasmGlobal wasmGlobal = 1;
}

message CreateWasmMemory {
  WasmMemory wasmMemory = 1;
}

message CreateWasmTable {
  WasmILType elementType = 1;
  int64 minSize = 2;
  optional int64 maxSize = 3;
}

message CreateWasmJSTag {
}

message CreateWasmTag {
    repeated WasmILType parameters = 1;
}

message WrapSuspending {
}

message WrapPromising {
}

message BindMethod {
    string methodName = 1;
}

// Wasm Operations

message Consti64 {
  int64 value = 1;
}

message Consti32 {
  int32 value = 1;
}

message Constf32 {
  float value = 1;
}

message Constf64 {
  double value = 1;
}

message WasmReturn {
  WasmILType returnType = 1;
}

// We only serialize the wasm types as the rest would be overkill and are not needed.
enum WasmILType {
  CONSTi32 = 0;
  CONSTi64 = 1;
  CONSTf32 = 2;
  CONSTf64 = 3;
  EXTERNREF = 4;
  FUNCREF = 5;
  SIMD128 = 6;
  NOTHING = 7;
}

message BeginWasmFunction {
  repeated WasmILType parameters = 1;
  WasmILType returnType = 2;
}

message EndWasmFunction {
}

message WasmJsCall {
  repeated WasmILType parameters = 1;
  WasmILType returnType = 2;
}

message Wasmi32CompareOp {
    int32 compareOperator = 1;
}

message Wasmi64CompareOp {
    int32 compareOperator = 1;
}

message Wasmf32CompareOp {
    int32 compareOperator = 1;
}

message Wasmf64CompareOp {
    int32 compareOperator = 1;
}

message Wasmi64BinOp {
    WasmIntegerBinaryOperator op = 1;
}

message Wasmi32BinOp {
    WasmIntegerBinaryOperator op = 1;
}

message Wasmi64UnOp {
    WasmIntegerUnaryOperator op = 1;
}

message Wasmi32UnOp {
    WasmIntegerUnaryOperator op = 1;
}

message Wasmf64BinOp {
    WasmFloatBinaryOperator op = 1;
}

message Wasmf32BinOp {
    WasmFloatBinaryOperator op = 1;
}

message Wasmf64UnOp {
    WasmFloatUnaryOperator op = 1;
}

message Wasmf32UnOp {
    WasmFloatUnaryOperator op = 1;
}

message Wasmi32EqualZero {
}

message Wasmi64EqualZero {
}

// Numerical Conversion Operations

message WasmWrapi64Toi32 {
}

message WasmTruncatef32Toi32 {
    bool isSigned = 1;
}

message WasmTruncatef64Toi32 {
    bool isSigned = 1;
}

message WasmExtendi32Toi64 {
    bool isSigned = 1;
}

message WasmTruncatef32Toi64 {
    bool isSigned = 1;
}

message WasmTruncatef64Toi64 {
    bool isSigned = 1;
}

message WasmConverti32Tof32 {
    bool isSigned = 1;
}

message WasmTruncatei64Tof32 {
    bool isSigned = 1;
}

message WasmDemotef64Tof32 {
}

message WasmConverti32Tof64 {
    bool isSigned = 1;
}

message WasmConverti64Tof64 {
    bool isSigned = 1;
}

message WasmConverti64Tof32 {
    bool isSigned = 1;
}


message WasmPromotef32Tof64 {
}

message WasmReinterpretf32Asi32 {
}

message WasmReinterpretf64Asi64 {
}

message WasmReinterpreti32Asf32 {
}

message WasmReinterpreti64Asf64 {
}

message WasmSignExtend8Intoi32 {
}

message WasmSignExtend16Intoi32 {
}

message WasmSignExtend8Intoi64 {
}

message WasmSignExtend16Intoi64 {
}

message WasmSignExtend32Intoi64 {
}

message WasmTruncateSatf32Toi32 {
    bool isSigned = 1;
}

message WasmTruncateSatf64Toi32 {
    bool isSigned = 1;
}

message WasmTruncateSatf32Toi64 {
    bool isSigned = 1;
}

message WasmTruncateSatf64Toi64 {
    bool isSigned = 1;
}

message WasmGlobal {
  bool isMutable = 1;
  oneof wasmGlobal {
    int32 valuei32 = 2;
    int64 valuei64 = 3;
    float valuef32 = 4;
    double valuef64 = 5;
    int64 nullref = 6;
    int64 funcref = 7;
    WasmILType imported = 8;
  }
}

message WasmMemory {
  int64 minPages = 1;
  optional int64 maxPages = 2;
  bool isShared = 3;
  bool isMemory64 = 4;
}

message WasmDefineGlobal {
   WasmGlobal wasmGlobal = 1;
}

message WasmDefineTable {
  WasmILType elementType = 1;
  int64 minSize = 2;
  optional int64 maxSize = 3;
  repeated int64 definedEntryIndices = 4;
}

message WasmDefineMemory {
  WasmMemory wasmMemory = 1;
}

message WasmLoadGlobal {
  WasmILType globalType = 2;
}

message WasmStoreGlobal {
  WasmILType globalType = 2;
}

// WasmTableGet and WasmTableSet need a WasmTableType as input.
message WasmTableGet {
  WasmILType elementType = 1;
  int64 minSize = 2;
  optional int64 maxSize = 3;
}

message WasmTableSet {
  WasmILType elementType = 1;
  int64 minSize = 2;
  optional int64 maxSize = 3;
}

enum WasmMemoryLoadType {
  I32_LOADMEM = 0;
  I64_LOADMEM = 1;
  F32_LOADMEM = 2;
  F64_LOADMEM = 3;
  I32_LOADMEM_8S = 4;
  I32_LOADMEM_8U = 5;
  I32_LOADMEM_16S = 6;
  I32_LOADMEM_16U = 7;
  I64_LOADMEM_8S = 8;
  I64_LOADMEM_8U = 9;
  I64_LOADMEM_16S = 10;
  I64_LOADMEM_16U = 11;
  I64_LOADMEM_32S = 12;
  I64_LOADMEM_32U = 13;
}

message WasmMemoryLoad {
  WasmMemoryLoadType loadType = 1;
  int64 staticOffset = 2;
  bool isMemory64 = 3;
}

enum WasmMemoryStoreType {
  I32_STOREMEM = 0;
  I64_STOREMEM = 1;
  F32_STOREMEM = 2;
  F64_STOREMEM = 3;
  I32_STOREMEM_8 = 4;
  I32_STOREMEM_16 = 5;
  I64_STOREMEM_8 = 6;
  I64_STOREMEM_16 = 7;
  I64_STOREMEM_32 = 8;
}

message WasmMemoryStore {
  WasmMemoryStoreType storeType = 1;
  int64 staticOffset = 2;
  bool isMemory64 = 3;
}

message WasmBeginBlock {
  repeated WasmILType parameters = 1;
  WasmILType returnType = 2;
}

message WasmEndBlock {
  WasmILType returnType = 1;
}

message WasmBeginLoop {
  repeated WasmILType parameters = 1;
  WasmILType returnType = 2;
}

message WasmEndLoop {
  WasmILType returnType = 1;
}

message WasmBeginTry {
  repeated WasmILType parameters = 1;
  WasmILType returnType = 2;
}

message WasmBeginCatchAll {
  WasmILType returnType = 2;
}

message WasmBeginCatch {
  repeated WasmILType parameters = 1;
  WasmILType returnType = 2;
}

message WasmEndTry {
  WasmILType returnType = 1;
}

message WasmBeginTryDelegate {
  repeated WasmILType parameters = 1;
  WasmILType returnType = 2;
}

message WasmEndTryDelegate {
}

message WasmThrow {
  repeated WasmILType parameters = 1;
}

message WasmRethrow {
}

message WasmDefineTag {
  repeated WasmILType parameters = 1;
}

message WasmBranch {
  repeated WasmILType parameters = 1;
}

message WasmBranchIf {
  repeated WasmILType parameters = 1;
}

message WasmReassign {
  WasmILType variableType = 1;
}

message WasmBeginIf {
    repeated WasmILType parameters = 1;
    WasmILType returnType = 2;
}

message WasmBeginElse {
    repeated WasmILType parameters = 1;
    WasmILType returnType = 2;
}

message WasmEndIf {
    WasmILType returnType = 1;
}

message WasmNop {
}

message WasmUnreachable {
}

message WasmSelect {
    WasmILType type = 1;
}

message ConstSimd128 {
    repeated uint32 value = 1;
}

message WasmSimd128Compare {
    uint32 shape = 1;
    uint32 compareOperator = 2;
}

message WasmSimd128IntegerUnOp {
    uint32 shape = 1;
    int32 unaryOperator = 2;
}

message WasmSimd128IntegerBinOp {
    uint32 shape = 1;
    int32 binaryOperator = 2;
}

message WasmSimd128FloatUnOp {
    uint32 shape = 1;
    int32 unaryOperator = 2;
}

message WasmSimd128FloatBinOp {
    uint32 shape = 1;
    int32 binaryOperator = 2;
}

message WasmI64x2Splat {
}

message WasmI64x2ExtractLane {
}

enum WasmSimdLoadKind {
  LOADS128 = 0;
  LOAD8x8S = 1;
  LOAD8x8U = 2;
  LOAD16x4S = 3;
  LOAD16x4U = 4;
  LOAD32x2S = 5;
  LOAD32x2U = 6;
  LOAD8SPLAT = 7;
  LOAD16SPLAT = 8;
  LOAD32SPLAT = 9;
  LOAD64SPLAT = 10;
}

message WasmSimdLoad {
  WasmSimdLoadKind kind = 1;
  int64 staticOffset = 2;
  bool isMemory64 = 3;
}
