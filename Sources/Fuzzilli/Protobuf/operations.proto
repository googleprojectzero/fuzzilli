// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package fuzzilli.protobuf;

// Parameters used by function definitions, not an operation by itself.
message Parameters {
    uint32 count = 1;
    bool hasRest = 2;
}

message LoadInteger {
    int64 value = 1;
}

message LoadBigInt {
    int64 value = 1;
}

message LoadFloat {
    double value = 1;
}

message LoadString {
    string value = 1;
}

message LoadBoolean {
    bool value = 1;
}

message LoadUndefined {
}

message LoadNull {
}

message LoadThis {
}

message LoadArguments {
}

message LoadRegExp {
    string pattern = 1;
    uint32 flags = 2;
}

message BeginObjectLiteral {
}

message ObjectLiteralAddProperty {
    string propertyName = 1;
}

message ObjectLiteralAddElement {
    int64 index = 1;
}

message ObjectLiteralAddComputedProperty {
}

message ObjectLiteralCopyProperties {
}

message ObjectLiteralSetPrototype {
}

message BeginObjectLiteralMethod {
    string methodName = 1;
    Parameters parameters = 2;
}

message EndObjectLiteralMethod {
}

message BeginObjectLiteralComputedMethod {
    Parameters parameters = 1;
}

message EndObjectLiteralComputedMethod {
}

message BeginObjectLiteralGetter {
    string propertyName = 1;
}

message EndObjectLiteralGetter {
}

message BeginObjectLiteralSetter {
    string propertyName = 1;
}

message EndObjectLiteralSetter {
}

message EndObjectLiteral {
}

message BeginClassDefinition {
    bool hasSuperclass = 1;
}

message BeginClassConstructor {
    Parameters parameters = 1;
}

message EndClassConstructor {
}

message ClassAddInstanceProperty {
    string propertyName = 1;
    bool hasValue = 2;
}

message ClassAddInstanceElement {
    int64 index = 1;
    bool hasValue = 2;
}

message ClassAddInstanceComputedProperty {
    bool hasValue = 1;
}

message BeginClassInstanceMethod {
    string methodName = 1;
    Parameters parameters = 2;
}

message EndClassInstanceMethod {
}

message BeginClassInstanceGetter {
    string propertyName = 1;
}

message EndClassInstanceGetter {
}

message BeginClassInstanceSetter {
    string propertyName = 1;
}

message EndClassInstanceSetter {
}

message ClassAddStaticProperty {
    string propertyName = 1;
    bool hasValue = 2;
}

message ClassAddStaticElement {
    int64 index = 1;
    bool hasValue = 2;
}

message ClassAddStaticComputedProperty {
    bool hasValue = 1;
}

message BeginClassStaticInitializer {
}

message EndClassStaticInitializer {
}

message BeginClassStaticMethod {
    string methodName = 1;
    Parameters parameters = 2;
}

message EndClassStaticMethod {
}

message BeginClassStaticGetter {
    string propertyName = 1;
}

message EndClassStaticGetter {
}

message BeginClassStaticSetter {
    string propertyName = 1;
}

message EndClassStaticSetter {
}

message ClassAddPrivateInstanceProperty {
    string propertyName = 1;
    bool hasValue = 2;
}

message BeginClassPrivateInstanceMethod {
    string methodName = 1;
    Parameters parameters = 2;
}

message EndClassPrivateInstanceMethod {
}

message ClassAddPrivateStaticProperty {
    string propertyName = 1;
    bool hasValue = 2;
}

message BeginClassPrivateStaticMethod {
    string methodName = 1;
    Parameters parameters = 2;
}

message EndClassPrivateStaticMethod {
}

message EndClassDefinition {
}

message CreateArray {
}

message CreateIntArray {
    repeated int64 values = 1;
}

message CreateFloatArray {
    repeated double values = 1;
}

message CreateTemplateString {
    repeated string parts = 1;
}

message CreateArrayWithSpread {
    repeated bool spreads = 1;
}

message LoadBuiltin {
    string builtinName = 1;
}

message GetProperty {
    string propertyName = 1;
    bool isGuarded = 2;
}

message SetProperty {
    string propertyName = 1;
}

message UpdateProperty {
    string propertyName = 1;
    BinaryOperator op = 2;
}

message DeleteProperty {
    string propertyName = 1;
    bool isGuarded = 2;
}

enum PropertyType {
    VALUE = 0;
    GETTER = 1;
    SETTER = 2;
    GETTERSETTER = 3;
}

message ConfigureProperty {
    string propertyName = 1;
    bool isWritable = 2;
    bool isConfigurable = 3;
    bool isEnumerable = 4;
    PropertyType type = 5;
}

message GetElement {
    int64 index = 1;
    bool isGuarded = 2;
}

message SetElement {
    int64 index = 1;
}

message UpdateElement {
    int64 index = 1;
    BinaryOperator op = 2;
}

message DeleteElement {
    int64 index = 1;
    bool isGuarded = 2;
}

message ConfigureElement {
    int64 index = 1;
    bool isWritable = 2;
    bool isConfigurable = 3;
    bool isEnumerable = 4;
    PropertyType type = 5;
}

message GetComputedProperty {
    bool isGuarded = 1;
}

message SetComputedProperty {
}

message UpdateComputedProperty {
    BinaryOperator op = 1;
}

message DeleteComputedProperty {
    bool isGuarded = 1;
}

message ConfigureComputedProperty {
    bool isWritable = 1;
    bool isConfigurable = 2;
    bool isEnumerable = 3;
    PropertyType type = 4;
}

message TypeOf {
}

message TestInstanceOf {
}

message TestIn {
}

message BeginPlainFunction {
    Parameters parameters = 1;
    bool isStrict = 2;
}

message EndPlainFunction {
}

message BeginArrowFunction {
    Parameters parameters = 1;
    bool isStrict = 2;
}

message EndArrowFunction {
}

message BeginGeneratorFunction {
    Parameters parameters = 1;
    bool isStrict = 2;
}

message EndGeneratorFunction {
}

message BeginAsyncFunction {
    Parameters parameters = 1;
    bool isStrict = 2;
}

message EndAsyncFunction {
}

message BeginAsyncArrowFunction {
    Parameters parameters = 1;
    bool isStrict = 2;
}

message EndAsyncArrowFunction {
}

message BeginAsyncGeneratorFunction {
    Parameters parameters = 1;
    bool isStrict = 2;
}

message EndAsyncGeneratorFunction {
}

message BeginConstructor {
    Parameters parameters = 1;
}

message EndConstructor {
}

message Return {
}

message Yield {
}

message YieldEach {
}

message Await {
}

message CallFunction {
    bool isGuarded = 1;
}

message CallFunctionWithSpread {
    repeated bool spreads = 1;
    bool isGuarded = 2;
}

message Construct {
    bool isGuarded = 1;
}

message ConstructWithSpread {
    repeated bool spreads = 1;
    bool isGuarded = 2;
}

message CallMethod {
    string methodName = 1;
    bool isGuarded = 2;
}

message CallMethodWithSpread {
    string methodName = 1;
    repeated bool spreads = 2;
    bool isGuarded = 3;
}

message CallComputedMethod {
    bool isGuarded = 1;
}

message CallComputedMethodWithSpread {
    repeated bool spreads = 1;
    bool isGuarded = 2;
}

enum UnaryOperator {
    PRE_INC = 0;
    PRE_DEC = 1;
    POST_INC = 2;
    POST_DEC = 3;
    LOGICAL_NOT = 4;
    BITWISE_NOT = 5;
    PLUS = 6;
    MINUS = 7;
}

message UnaryOperation {
    UnaryOperator op = 1;
}

enum BinaryOperator {
    ADD = 0;
    SUB = 1;
    MUL = 2;
    DIV = 3;
    MOD = 4;
    BIT_AND = 5;
    BIT_OR = 6;
    LOGICAL_AND = 7;
    LOGICAL_OR = 8;
    XOR = 9;
    LSHIFT = 10;
    RSHIFT = 11;
    EXP = 12;
    UNRSHIFT = 13;
}

message BinaryOperation {
    BinaryOperator op = 1;
}

message TernaryOperation {
}

message Update {
    BinaryOperator op = 1;
}

message Dup {
}

message Reassign {
}

message DestructArray {
    repeated int32 indices = 1;
    bool lastIsRest = 2;
}

message DestructArrayAndReassign {
    repeated int32 indices = 1;
    bool lastIsRest = 2;
}

message DestructObject {
    repeated string properties = 1;
    bool hasRestElement = 2;
}

message DestructObjectAndReassign {
    repeated string properties = 1;
    bool hasRestElement = 2;
}

enum Comparator {
    EQUAL = 0;
    STRICT_EQUAL = 1;
    NOT_EQUAL = 2;
    STRICT_NOT_EQUAL = 3;
    LESS_THAN = 4;
    LESS_THAN_OR_EQUAL = 5;
    GREATER_THAN = 6;
    GREATER_THAN_OR_EQUAL = 7;
}

message Compare {
    Comparator op = 1;
}

message LoadNamedVariable {
    string variableName = 1;
}

message StoreNamedVariable {
    string variableName = 1;
}

message DefineNamedVariable {
    string variableName = 1;
}

message Eval {
    string code = 1;
    bool hasOutput = 2;
}

message CallSuperConstructor {
    repeated bool spreads = 1;
}

message CallSuperMethod {
    string methodName = 1;
}

message GetPrivateProperty {
    string propertyName = 1;
}

message SetPrivateProperty {
    string propertyName = 1;
}

message UpdatePrivateProperty {
    string propertyName = 1;
    BinaryOperator op = 2;
}

message CallPrivateMethod {
    string methodName = 1;
}

message GetSuperProperty {
    string propertyName = 1;
}

message SetSuperProperty {
    string propertyName = 1;
}

message GetComputedSuperProperty {
}

message SetComputedSuperProperty {
}

message UpdateSuperProperty {
    string propertyName = 1;
    BinaryOperator op = 2;
}

message LoadNewTarget {
}

message Explore {
    string id = 1;
    int64 rngSeed = 2;
}

message Probe {
    string id = 1;
}

message Fixup {
    string id = 1;
    string action = 2;
    string originalOperation = 3;
    bool hasOutput = 4;
}

message BeginWith {
}

message EndWith {
}

message BeginIf {
    bool inverted = 1;
}

message BeginElse {
}

message EndIf {
}

message BeginSwitch {
}

message BeginSwitchCase {
}

message BeginSwitchDefaultCase {
}

message SwitchBreak {
}

message EndSwitchCase {
    bool fallsThrough = 1;
}

message EndSwitch {
}

message BeginWhileLoopHeader {
}

message BeginWhileLoopBody {
}

message EndWhileLoop {
}

message BeginDoWhileLoopBody {
}

message BeginDoWhileLoopHeader {
}

message EndDoWhileLoop {
}

message BeginForLoopInitializer {
}

message BeginForLoopCondition {
}

message BeginForLoopAfterthought {
}

message BeginForLoopBody {
}

message EndForLoop {
}

message BeginForInLoop {
}

message EndForInLoop {
}

message BeginForOfLoop {
}

message BeginForOfLoopWithDestruct {
    repeated int32 indices = 1;
    bool hasRestElement = 2;
}

message EndForOfLoop {
}

message BeginRepeatLoop {
    int64 iterations = 1;
    bool exposesLoopCounter = 2;
}

message EndRepeatLoop {
}

message LoopLabelBreak {
}

message LoopLabelContinue {
}

message LoadLabel {
}

message LoopBreak {
}

message LoopContinue {
}

message BeginTry {
}

message BeginCatch {
}

message BeginFinally {
}

message EndTryCatch {
}

message EndTryCatchFinally {
}

message ThrowException {
}

message BeginCodeString {
}

message EndCodeString {
}

message BeginBlockStatement {
}

message EndBlockStatement {
}

message Nop {
}

message Print {
}
