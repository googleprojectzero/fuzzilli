// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: typesystem.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// If types are sent frequently (e.g. when they are collected at runtime
/// and associated with a program), this might need a deduplication
/// mechanism similar to the one for Operations.
public struct Fuzzilli_Protobuf_Type {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var definiteType: UInt32 {
    get {return _storage._definiteType}
    set {_uniqueStorage()._definiteType = newValue}
  }

  public var possibleType: UInt32 {
    get {return _storage._possibleType}
    set {_uniqueStorage()._possibleType = newValue}
  }

  public var properties: [String] {
    get {return _storage._properties}
    set {_uniqueStorage()._properties = newValue}
  }

  public var methods: [String] {
    get {return _storage._methods}
    set {_uniqueStorage()._methods = newValue}
  }

  public var group: String {
    get {return _storage._group}
    set {_uniqueStorage()._group = newValue}
  }

  public var signature: Fuzzilli_Protobuf_FunctionSignature {
    get {return _storage._signature ?? Fuzzilli_Protobuf_FunctionSignature()}
    set {_uniqueStorage()._signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return _storage._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {_uniqueStorage()._signature = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Fuzzilli_Protobuf_FunctionSignature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var inputTypes: [Fuzzilli_Protobuf_Type] {
    get {return _storage._inputTypes}
    set {_uniqueStorage()._inputTypes = newValue}
  }

  public var outputType: Fuzzilli_Protobuf_Type {
    get {return _storage._outputType ?? Fuzzilli_Protobuf_Type()}
    set {_uniqueStorage()._outputType = newValue}
  }
  /// Returns true if `outputType` has been explicitly set.
  public var hasOutputType: Bool {return _storage._outputType != nil}
  /// Clears the value of `outputType`. Subsequent reads from it will return its default value.
  public mutating func clearOutputType() {_uniqueStorage()._outputType = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "fuzzilli.protobuf"

extension Fuzzilli_Protobuf_Type: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Type"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "definiteType"),
    2: .same(proto: "possibleType"),
    3: .same(proto: "properties"),
    4: .same(proto: "methods"),
    5: .same(proto: "group"),
    6: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _definiteType: UInt32 = 0
    var _possibleType: UInt32 = 0
    var _properties: [String] = []
    var _methods: [String] = []
    var _group: String = String()
    var _signature: Fuzzilli_Protobuf_FunctionSignature? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _definiteType = source._definiteType
      _possibleType = source._possibleType
      _properties = source._properties
      _methods = source._methods
      _group = source._group
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._definiteType)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._possibleType)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._properties)
        case 4: try decoder.decodeRepeatedStringField(value: &_storage._methods)
        case 5: try decoder.decodeSingularStringField(value: &_storage._group)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._definiteType != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._definiteType, fieldNumber: 1)
      }
      if _storage._possibleType != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._possibleType, fieldNumber: 2)
      }
      if !_storage._properties.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._properties, fieldNumber: 3)
      }
      if !_storage._methods.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._methods, fieldNumber: 4)
      }
      if !_storage._group.isEmpty {
        try visitor.visitSingularStringField(value: _storage._group, fieldNumber: 5)
      }
      if let v = _storage._signature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuzzilli_Protobuf_Type, rhs: Fuzzilli_Protobuf_Type) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._definiteType != rhs_storage._definiteType {return false}
        if _storage._possibleType != rhs_storage._possibleType {return false}
        if _storage._properties != rhs_storage._properties {return false}
        if _storage._methods != rhs_storage._methods {return false}
        if _storage._group != rhs_storage._group {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuzzilli_Protobuf_FunctionSignature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FunctionSignature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inputTypes"),
    2: .same(proto: "outputType"),
  ]

  fileprivate class _StorageClass {
    var _inputTypes: [Fuzzilli_Protobuf_Type] = []
    var _outputType: Fuzzilli_Protobuf_Type? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _inputTypes = source._inputTypes
      _outputType = source._outputType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._inputTypes)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._outputType)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._inputTypes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputTypes, fieldNumber: 1)
      }
      if let v = _storage._outputType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuzzilli_Protobuf_FunctionSignature, rhs: Fuzzilli_Protobuf_FunctionSignature) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._inputTypes != rhs_storage._inputTypes {return false}
        if _storage._outputType != rhs_storage._outputType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
