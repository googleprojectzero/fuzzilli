// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is autogenerated. Please check the README.

syntax = "proto3";
package fuzzilli.protobuf;

import "operations.proto";

message Instruction {
    // The operation is either encoded as an index, referring to the nth operation
    // (so that shared operations are also only present once in the protobuf), or
    // as one of the many concrete Operation messages.
    repeated uint32 inouts = 1;
    oneof operation {
        uint32 opIdx = 2;
        Nop nop = 3;
        LoadInteger loadInteger = 4;
        LoadBigInt loadBigInt = 5;
        LoadFloat loadFloat = 6;
        LoadString loadString = 7;
        LoadBoolean loadBoolean = 8;
        LoadUndefined loadUndefined = 9;
        LoadNull loadNull = 10;
        LoadThis loadThis = 11;
        LoadArguments loadArguments = 12;
        CreateNamedVariable createNamedVariable = 13;
        LoadDisposableVariable loadDisposableVariable = 14;
        LoadAsyncDisposableVariable loadAsyncDisposableVariable = 15;
        LoadRegExp loadRegExp = 16;
        BeginObjectLiteral beginObjectLiteral = 17;
        ObjectLiteralAddProperty objectLiteralAddProperty = 18;
        ObjectLiteralAddElement objectLiteralAddElement = 19;
        ObjectLiteralAddComputedProperty objectLiteralAddComputedProperty = 20;
        ObjectLiteralCopyProperties objectLiteralCopyProperties = 21;
        ObjectLiteralSetPrototype objectLiteralSetPrototype = 22;
        BeginObjectLiteralMethod beginObjectLiteralMethod = 23;
        EndObjectLiteralMethod endObjectLiteralMethod = 24;
        BeginObjectLiteralComputedMethod beginObjectLiteralComputedMethod = 25;
        EndObjectLiteralComputedMethod endObjectLiteralComputedMethod = 26;
        BeginObjectLiteralGetter beginObjectLiteralGetter = 27;
        EndObjectLiteralGetter endObjectLiteralGetter = 28;
        BeginObjectLiteralSetter beginObjectLiteralSetter = 29;
        EndObjectLiteralSetter endObjectLiteralSetter = 30;
        EndObjectLiteral endObjectLiteral = 31;
        BeginClassDefinition beginClassDefinition = 32;
        BeginClassConstructor beginClassConstructor = 33;
        EndClassConstructor endClassConstructor = 34;
        ClassAddInstanceProperty classAddInstanceProperty = 35;
        ClassAddInstanceElement classAddInstanceElement = 36;
        ClassAddInstanceComputedProperty classAddInstanceComputedProperty = 37;
        BeginClassInstanceMethod beginClassInstanceMethod = 38;
        EndClassInstanceMethod endClassInstanceMethod = 39;
        BeginClassInstanceGetter beginClassInstanceGetter = 40;
        EndClassInstanceGetter endClassInstanceGetter = 41;
        BeginClassInstanceSetter beginClassInstanceSetter = 42;
        EndClassInstanceSetter endClassInstanceSetter = 43;
        ClassAddStaticProperty classAddStaticProperty = 44;
        ClassAddStaticElement classAddStaticElement = 45;
        ClassAddStaticComputedProperty classAddStaticComputedProperty = 46;
        BeginClassStaticInitializer beginClassStaticInitializer = 47;
        EndClassStaticInitializer endClassStaticInitializer = 48;
        BeginClassStaticMethod beginClassStaticMethod = 49;
        EndClassStaticMethod endClassStaticMethod = 50;
        BeginClassStaticGetter beginClassStaticGetter = 51;
        EndClassStaticGetter endClassStaticGetter = 52;
        BeginClassStaticSetter beginClassStaticSetter = 53;
        EndClassStaticSetter endClassStaticSetter = 54;
        ClassAddPrivateInstanceProperty classAddPrivateInstanceProperty = 55;
        BeginClassPrivateInstanceMethod beginClassPrivateInstanceMethod = 56;
        EndClassPrivateInstanceMethod endClassPrivateInstanceMethod = 57;
        ClassAddPrivateStaticProperty classAddPrivateStaticProperty = 58;
        BeginClassPrivateStaticMethod beginClassPrivateStaticMethod = 59;
        EndClassPrivateStaticMethod endClassPrivateStaticMethod = 60;
        EndClassDefinition endClassDefinition = 61;
        CreateArray createArray = 62;
        CreateIntArray createIntArray = 63;
        CreateFloatArray createFloatArray = 64;
        CreateArrayWithSpread createArrayWithSpread = 65;
        CreateTemplateString createTemplateString = 66;
        GetProperty getProperty = 67;
        SetProperty setProperty = 68;
        UpdateProperty updateProperty = 69;
        DeleteProperty deleteProperty = 70;
        ConfigureProperty configureProperty = 71;
        GetElement getElement = 72;
        SetElement setElement = 73;
        UpdateElement updateElement = 74;
        DeleteElement deleteElement = 75;
        ConfigureElement configureElement = 76;
        GetComputedProperty getComputedProperty = 77;
        SetComputedProperty setComputedProperty = 78;
        UpdateComputedProperty updateComputedProperty = 79;
        DeleteComputedProperty deleteComputedProperty = 80;
        ConfigureComputedProperty configureComputedProperty = 81;
        TypeOf typeOf = 82;
        Void void = 83;
        TestInstanceOf testInstanceOf = 84;
        TestIn testIn = 85;
        BeginPlainFunction beginPlainFunction = 86;
        EndPlainFunction endPlainFunction = 87;
        BeginArrowFunction beginArrowFunction = 88;
        EndArrowFunction endArrowFunction = 89;
        BeginGeneratorFunction beginGeneratorFunction = 90;
        EndGeneratorFunction endGeneratorFunction = 91;
        BeginAsyncFunction beginAsyncFunction = 92;
        EndAsyncFunction endAsyncFunction = 93;
        BeginAsyncArrowFunction beginAsyncArrowFunction = 94;
        EndAsyncArrowFunction endAsyncArrowFunction = 95;
        BeginAsyncGeneratorFunction beginAsyncGeneratorFunction = 96;
        EndAsyncGeneratorFunction endAsyncGeneratorFunction = 97;
        BeginConstructor beginConstructor = 98;
        EndConstructor endConstructor = 99;
        Directive directive = 100;
        Return return = 101;
        Yield yield = 102;
        YieldEach yieldEach = 103;
        Await await = 104;
        CallFunction callFunction = 105;
        CallFunctionWithSpread callFunctionWithSpread = 106;
        Construct construct = 107;
        ConstructWithSpread constructWithSpread = 108;
        CallMethod callMethod = 109;
        CallMethodWithSpread callMethodWithSpread = 110;
        CallComputedMethod callComputedMethod = 111;
        CallComputedMethodWithSpread callComputedMethodWithSpread = 112;
        UnaryOperation unaryOperation = 113;
        BinaryOperation binaryOperation = 114;
        TernaryOperation ternaryOperation = 115;
        Update update = 116;
        Dup dup = 117;
        Reassign reassign = 118;
        DestructArray destructArray = 119;
        DestructArrayAndReassign destructArrayAndReassign = 120;
        DestructObject destructObject = 121;
        DestructObjectAndReassign destructObjectAndReassign = 122;
        Compare compare = 123;
        Eval eval = 124;
        BeginWith beginWith = 125;
        EndWith endWith = 126;
        CallSuperConstructor callSuperConstructor = 127;
        CallSuperMethod callSuperMethod = 128;
        GetPrivateProperty getPrivateProperty = 129;
        SetPrivateProperty setPrivateProperty = 130;
        UpdatePrivateProperty updatePrivateProperty = 131;
        CallPrivateMethod callPrivateMethod = 132;
        GetSuperProperty getSuperProperty = 133;
        SetSuperProperty setSuperProperty = 134;
        GetComputedSuperProperty getComputedSuperProperty = 135;
        SetComputedSuperProperty setComputedSuperProperty = 136;
        UpdateSuperProperty updateSuperProperty = 137;
        BeginIf beginIf = 138;
        BeginElse beginElse = 139;
        EndIf endIf = 140;
        BeginWhileLoopHeader beginWhileLoopHeader = 141;
        BeginWhileLoopBody beginWhileLoopBody = 142;
        EndWhileLoop endWhileLoop = 143;
        BeginDoWhileLoopBody beginDoWhileLoopBody = 144;
        BeginDoWhileLoopHeader beginDoWhileLoopHeader = 145;
        EndDoWhileLoop endDoWhileLoop = 146;
        BeginForLoopInitializer beginForLoopInitializer = 147;
        BeginForLoopCondition beginForLoopCondition = 148;
        BeginForLoopAfterthought beginForLoopAfterthought = 149;
        BeginForLoopBody beginForLoopBody = 150;
        EndForLoop endForLoop = 151;
        BeginForInLoop beginForInLoop = 152;
        EndForInLoop endForInLoop = 153;
        BeginForOfLoop beginForOfLoop = 154;
        BeginForOfLoopWithDestruct beginForOfLoopWithDestruct = 155;
        EndForOfLoop endForOfLoop = 156;
        BeginRepeatLoop beginRepeatLoop = 157;
        EndRepeatLoop endRepeatLoop = 158;
        LoopBreak loopBreak = 159;
        LoopContinue loopContinue = 160;
        BeginTry beginTry = 161;
        BeginCatch beginCatch = 162;
        BeginFinally beginFinally = 163;
        EndTryCatchFinally endTryCatchFinally = 164;
        ThrowException throwException = 165;
        BeginCodeString beginCodeString = 166;
        EndCodeString endCodeString = 167;
        BeginBlockStatement beginBlockStatement = 168;
        EndBlockStatement endBlockStatement = 169;
        BeginSwitch beginSwitch = 170;
        BeginSwitchCase beginSwitchCase = 171;
        BeginSwitchDefaultCase beginSwitchDefaultCase = 172;
        EndSwitchCase endSwitchCase = 173;
        EndSwitch endSwitch = 174;
        SwitchBreak switchBreak = 175;
        LoadNewTarget loadNewTarget = 176;
        Print print = 177;
        Explore explore = 178;
        Probe probe = 179;
        Fixup fixup = 180;
        BeginWasmModule beginWasmModule = 181;
        EndWasmModule endWasmModule = 182;
        CreateWasmGlobal createWasmGlobal = 183;
        CreateWasmMemory createWasmMemory = 184;
        CreateWasmTable createWasmTable = 185;
        CreateWasmJSTag createWasmJSTag = 186;
        CreateWasmTag createWasmTag = 187;
        WrapPromising wrapPromising = 188;
        WrapSuspending wrapSuspending = 189;
        BindMethod bindMethod = 190;
        Consti64 consti64 = 191;
        Consti32 consti32 = 192;
        Constf32 constf32 = 193;
        Constf64 constf64 = 194;
        WasmReturn wasmReturn = 195;
        WasmJsCall wasmJsCall = 196;
        Wasmi32CompareOp wasmi32CompareOp = 197;
        Wasmi64CompareOp wasmi64CompareOp = 198;
        Wasmf32CompareOp wasmf32CompareOp = 199;
        Wasmf64CompareOp wasmf64CompareOp = 200;
        Wasmi32EqualZero wasmi32EqualZero = 201;
        Wasmi64EqualZero wasmi64EqualZero = 202;
        Wasmi32BinOp wasmi32BinOp = 203;
        Wasmi64BinOp wasmi64BinOp = 204;
        Wasmi32UnOp wasmi32UnOp = 205;
        Wasmi64UnOp wasmi64UnOp = 206;
        Wasmf32BinOp wasmf32BinOp = 207;
        Wasmf64BinOp wasmf64BinOp = 208;
        Wasmf32UnOp wasmf32UnOp = 209;
        Wasmf64UnOp wasmf64UnOp = 210;
        WasmWrapi64Toi32 wasmWrapi64Toi32 = 211;
        WasmTruncatef32Toi32 wasmTruncatef32Toi32 = 212;
        WasmTruncatef64Toi32 wasmTruncatef64Toi32 = 213;
        WasmExtendi32Toi64 wasmExtendi32Toi64 = 214;
        WasmTruncatef32Toi64 wasmTruncatef32Toi64 = 215;
        WasmTruncatef64Toi64 wasmTruncatef64Toi64 = 216;
        WasmConverti32Tof32 wasmConverti32Tof32 = 217;
        WasmConverti64Tof32 wasmConverti64Tof32 = 218;
        WasmDemotef64Tof32 wasmDemotef64Tof32 = 219;
        WasmConverti32Tof64 wasmConverti32Tof64 = 220;
        WasmConverti64Tof64 wasmConverti64Tof64 = 221;
        WasmPromotef32Tof64 wasmPromotef32Tof64 = 222;
        WasmReinterpretf32Asi32 wasmReinterpretf32Asi32 = 223;
        WasmReinterpretf64Asi64 wasmReinterpretf64Asi64 = 224;
        WasmReinterpreti32Asf32 wasmReinterpreti32Asf32 = 225;
        WasmReinterpreti64Asf64 wasmReinterpreti64Asf64 = 226;
        WasmSignExtend8Intoi32 wasmSignExtend8Intoi32 = 227;
        WasmSignExtend16Intoi32 wasmSignExtend16Intoi32 = 228;
        WasmSignExtend8Intoi64 wasmSignExtend8Intoi64 = 229;
        WasmSignExtend16Intoi64 wasmSignExtend16Intoi64 = 230;
        WasmSignExtend32Intoi64 wasmSignExtend32Intoi64 = 231;
        WasmTruncateSatf32Toi32 wasmTruncateSatf32Toi32 = 232;
        WasmTruncateSatf64Toi32 wasmTruncateSatf64Toi32 = 233;
        WasmTruncateSatf32Toi64 wasmTruncateSatf32Toi64 = 234;
        WasmTruncateSatf64Toi64 wasmTruncateSatf64Toi64 = 235;
        WasmReassign wasmReassign = 236;
        WasmDefineGlobal wasmDefineGlobal = 237;
        WasmDefineTable wasmDefineTable = 238;
        WasmDefineMemory wasmDefineMemory = 239;
        WasmLoadGlobal wasmLoadGlobal = 240;
        WasmStoreGlobal wasmStoreGlobal = 241;
        WasmTableGet wasmTableGet = 242;
        WasmTableSet wasmTableSet = 243;
        WasmMemoryLoad wasmMemoryLoad = 244;
        WasmMemoryStore wasmMemoryStore = 245;
        BeginWasmFunction beginWasmFunction = 246;
        EndWasmFunction endWasmFunction = 247;
        WasmBeginBlock wasmBeginBlock = 248;
        WasmEndBlock wasmEndBlock = 249;
        WasmBeginLoop wasmBeginLoop = 250;
        WasmEndLoop wasmEndLoop = 251;
        WasmBranch wasmBranch = 252;
        WasmBranchIf wasmBranchIf = 253;
        WasmNop wasmNop = 254;
        WasmBeginIf wasmBeginIf = 255;
        WasmBeginElse wasmBeginElse = 256;
        WasmEndIf wasmEndIf = 257;
        WasmBeginTry wasmBeginTry = 258;
        WasmBeginCatchAll wasmBeginCatchAll = 259;
        WasmBeginCatch wasmBeginCatch = 260;
        WasmEndTry wasmEndTry = 261;
        WasmBeginTryDelegate wasmBeginTryDelegate = 262;
        WasmEndTryDelegate wasmEndTryDelegate = 263;
        WasmThrow wasmThrow = 264;
        WasmRethrow wasmRethrow = 265;
        WasmDefineTag wasmDefineTag = 266;
        ConstSimd128 constSimd128 = 267;
        WasmSimd128Compare wasmSimd128Compare = 268;
        WasmSimd128IntegerUnOp wasmSimd128IntegerUnOp = 269;
        WasmSimd128IntegerBinOp wasmSimd128IntegerBinOp = 270;
        WasmSimd128FloatUnOp wasmSimd128FloatUnOp = 271;
        WasmSimd128FloatBinOp wasmSimd128FloatBinOp = 272;
        WasmI64x2Splat wasmI64x2Splat = 273;
        WasmI64x2ExtractLane wasmI64x2ExtractLane = 274;
        WasmSimdLoad wasmSimdLoad = 275;
        WasmUnreachable wasmUnreachable = 276;
        WasmSelect wasmSelect = 277;
        LoopNestedBreak loopNestedBreak = 278;
        BlockNestedBreak blockNestedBreak = 279;
        IfNestedBreak ifNestedBreak = 280;
        TryNestedBreak tryNestedBreak = 281;
        SwitchNestedBreak switchNestedBreak = 282;
        WithNestedBreak withNestedBreak = 283;
        LoopNestedContinue loopNestedContinue = 284;
    }
}

message Program {
    bytes uuid = 1;
    repeated Instruction code = 2;
    map<sint32, string> comments = 3;
    Program parent = 4;
}
