// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package fuzzilli.protobuf;

import "operations.proto";
import "typesystem.proto";

message Instruction {
    // The operation is either encoded as an index, referring to the nth operation
    // (so that shared operations are also only present once in the protobuf), or
    // as one of the many concrete Operation messages.
    repeated uint32 inouts = 1;
    oneof operation {
        uint32 opIdx = 2;
        // TODO fixup keys
        LoadInteger loadInteger = 5;
        LoadBigInt loadBigInt = 76;
        LoadFloat loadFloat = 6;
        LoadString loadString = 7;
        LoadBoolean loadBoolean = 8;
        LoadUndefined loadUndefined = 9;
        LoadNull loadNull = 10;
        LoadRegExp loadRegExp = 77;
        CreateObject createObject = 11;
        CreateArray createArray = 12;
        CreateTemplateString createTemplateString = 102;
        CreateObjectWithSpread createObjectWithSpread = 13;
        CreateArrayWithSpread createArrayWithSpread = 14;
        LoadBuiltin loadBuiltin = 15;
        LoadProperty loadProperty = 16;
        StoreProperty storeProperty = 17;
        DeleteProperty deleteProperty = 18;
        LoadElement loadElement = 19;
        StoreElement storeElement = 20;
        DeleteElement deleteElement = 21;
        LoadComputedProperty loadComputedProperty = 22;
        StoreComputedProperty storeComputedProperty = 23;
        DeleteComputedProperty deleteComputedProperty = 24;
        TypeOf typeOf = 25;
        InstanceOf instanceOf = 26;
        In in = 27;
        BeginPlainFunctionDefinition beginPlainFunctionDefinition = 28;
        EndPlainFunctionDefinition endPlainFunctionDefinition = 30;
        BeginStrictFunctionDefinition beginStrictFunctionDefinition = 65;
        EndStrictFunctionDefinition endStrictFunctionDefinition = 66;
        BeginArrowFunctionDefinition beginArrowFunctionDefinition = 67;
        EndArrowFunctionDefinition endArrowFunctionDefinition = 68;
        BeginGeneratorFunctionDefinition beginGeneratorFunctionDefinition = 69;
        EndGeneratorFunctionDefinition endGeneratorFunctionDefinition = 70;
        BeginAsyncFunctionDefinition beginAsyncFunctionDefinition = 71;
        EndAsyncFunctionDefinition endAsyncFunctionDefinition = 72;
        BeginAsyncArrowFunctionDefinition beginAsyncArrowFunctionDefinition= 79;
        EndAsyncArrowFunctionDefinition endAsyncArrowFunctionDefinition = 80;
        BeginAsyncGeneratorFunctionDefinition beginAsyncGeneratorFunctionDefinition = 85;
        EndAsyncGeneratorFunctionDefinition endAsyncGeneratorFunctionDefinition = 86;
        Return return = 29;
        Yield yield = 73;
        YieldEach yieldEach = 74;
        Await await = 75;
        CallMethod callMethod = 31;
        CallComputedMethod callComputedMethod = 96;
        CallFunction callFunction = 32;
        Construct construct = 33;
        CallFunctionWithSpread callFunctionWithSpread = 34;
        UnaryOperation unaryOperation = 35;
        BinaryOperation binaryOperation = 36;
        BinaryOperationAndReassign binaryOperationAndReassign = 97;
        Dup dup = 37;
        Reassign reassign = 38;
        Compare compare = 39;
        ConditionalOperation conditionalOperation = 98;
        Eval eval = 40;
        BeginClassDefinition beginClassDefinition = 87;
        BeginMethodDefinition beginMethodDefinition = 88;
        EndClassDefinition endClassDefinition = 89;
        CallSuperConstructor callSuperConstructor = 90;
        CallSuperMethod callSuperMethod = 91;
        LoadSuperProperty loadSuperProperty = 92;
        StoreSuperProperty storeSuperProperty = 93;
        BeginWith beginWith = 41;
        EndWith endWith = 42;
        LoadFromScope loadFromScope = 43;
        StoreToScope storeToScope = 44;
        BeginIf beginIf = 45;
        BeginElse beginElse = 46;
        EndIf endIf = 47;
        BeginSwitch beginSwitch = 99;
        BeginSwitchCase beginSwitchCase = 100;
        EndSwitch endSwitch = 101;
        BeginWhile beginWhile = 48;
        EndWhile endWhile = 49;
        BeginDoWhile beginDoWhile = 50;
        EndDoWhile endDoWhile= 51;
        BeginFor beginFor = 52;
        EndFor endFor = 53;
        BeginForIn beginForIn = 54;
        EndForIn endForIn = 55;
        BeginForOf beginForOf = 56;
        EndForOf endForOf = 57;
        Break break = 58;
        Continue continue = 59;
        BeginTry beginTry = 60;
        BeginCatch beginCatch = 61;
        BeginFinally beginFinally = 95;
        EndTryCatch endTryCatch = 62;
        ThrowException throwException = 63;
        BeginCodeString beginCodeString = 81;
        EndCodeString endCodeString = 82;
        BeginBlockStatement beginBlockStatement = 83;
        EndBlockStatement endBlockStatement = 84;
        Nop nop = 64;
    }
}

// Keep in sync with TypeCollectionStatus.swift
enum TypeCollectionStatus {
    SUCCESS = 0;
    ERROR = 1;
    TIMEOUT = 2;
    NOTATTEMPTED = 3;
}

// Keep in sync with ProgramTypes.swift
enum TypeQuality {
    INFERRED = 0;
    RUNTIME = 1;
}

// We store type information simply as list of these
// TypeInfo messages instead of having separate lists
// per variable. This is simpler to en- and decode
// but is a bit less efficient if many variables change
// their type frequently.
message TypeInfo {
    uint32 variable = 1;
    uint32 index = 2;
    Type type = 3;
    TypeQuality quality = 4;
}

// Encoding for instructions and types must deterministic,
// i.e. happen in the same order every time. Our operation
// and type extension caches rely on that.
message Program {
    bytes uuid = 1;
    repeated Instruction code = 2;
    repeated TypeInfo types = 3;
    TypeCollectionStatus typeCollectionStatus = 4;
    map<sint32, string> comments = 5;
    Program parent = 6;
}
