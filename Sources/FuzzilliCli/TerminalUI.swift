// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import Fuzzilli

let Seconds = 1.0
let Minutes = 60.0 * Seconds
let Hours   = 60.0 * Minutes

// Keep track of the coverage to determine progress over time
var oldCoverage = 0.0
var TicksNewCoverage = 0

// A very basic terminal UI.
class TerminalUI {
    // If set, the next program generated by the fuzzer will be printed to the screen.
    var printNextGeneratedProgram: Bool

    
    init(for fuzzer: Fuzzer) {
        printNextGeneratedProgram = false

        // Event listeners etc. have to be registered on the fuzzer's queue
        fuzzer.queue.addOperation {
            self.initOnFuzzerQueue(fuzzer)
            
        }
    }

    // This print just gives us a bit more buffer
    func printUpdate(_ statusUpdate: String) {
        print()
        print(statusUpdate) 
    }

    /*
    import Darwin
    import Dispatch

    var w = winsize()
    if ioctl(STDOUT_FILENO, TIOCGWINSZ, &w) == 0 {
        print("rows:", w.ws_row, "cols", w.ws_col)
    }

    let sigwinchSrc = DispatchSource.makeSignalSource(signal: SIGWINCH, queue: .main)
    sigwinchSrc.setEventHandler {
        if ioctl(STDOUT_FILENO, TIOCGWINSZ, &w) == 0 {
            print("rows:", w.ws_row, "cols", w.ws_col)
        }
    }
    sigwinchSrc.resume()

    dispatchMain()
    */
    var statusmsgArray = [""]

    func initOnFuzzerQueue(_ fuzzer: Fuzzer) {
        // Register log event listener now to be able to print log messages
        // generated during fuzzer initialization


        // Clear screen on the beginning for good printing of stats
        print("\u{001B}[2J")

        fuzzer.events.Log.observe { (creator, level, label, msg) in
            let color = self.colorForLevel[level]!
            // The whole space that we have for status messages
            //var statusmsgSpace = Int(ProcessInfo.processInfo.environment["LINES"]) - 19
            
            let statusmsgSpace: Int = 20
            if creator == fuzzer.id {
                self.statusmsgArray.append("\u{001B}[2K\u{001B}[0;\(color.rawValue)m[\(label)] \(msg)\u{001B}[0;\(Color.reset.rawValue)m")
            } else {
                // Mark message as coming from a worker by including its id
                let shortId = creator.uuidString.split(separator: "-")[0]
                self.statusmsgArray.append("\u{001B}[2K\u{001B}[0;\(color.rawValue)m[\(shortId):\(label)] \(msg)\u{001B}[0;\(Color.reset.rawValue)m")
            }

            while self.statusmsgArray.count > statusmsgSpace {
                self.statusmsgArray.remove(at:0)
            }
        }
        
        fuzzer.events.CrashFound.observe { crash in
            if crash.isUnique {
                self.printUpdate("########## Unique Crash Found ##########")
                self.printUpdate(fuzzer.lifter.lift(crash.program))
            }
        }
        
        fuzzer.events.ProgramGenerated.observe { program in
            if self.printNextGeneratedProgram {
                self.printUpdate("--------- Generated Program -----------")
                self.printUpdate(fuzzer.lifter.lift(program, withOptions: [.dumpTypes]))
                self.printNextGeneratedProgram = false
            }
        }
        
        // Do everything else after fuzzer initialization finished
        fuzzer.events.Initialized.observe {
            if let stats = Statistics.instance(for: fuzzer) {
                fuzzer.events.Shutdown.observe {
                    print("\u{001b}[2J")
                    self.printStats(stats.compute(), of: fuzzer)
                    print("\n++++++++++ Fuzzer Finished ++++++++++\n")
                }
                
                // We could also run our own timer on the main queue instead if we want to
                fuzzer.timers.scheduleTask(every: 1 * Seconds) {
                    self.printStats(stats.compute(), of: fuzzer)
                    print()
                }
            }
        }
    }
    
    func printStats(_ stats: Statistics.Data, of fuzzer: Fuzzer) {
        print("\u{001B}[0;0H\u{001B}[2K") // move to 0, 0 on the terminal and clean that part
        
        var CoverageColor = ""
        var CrashingColor = ""

        // TODO: Move this to the right part; assuming where all the "stats" are defined
        // Check how many "ticks" ago the coverage hasn't changed
        if oldCoverage == stats.coverage {
            TicksNewCoverage += 1
        } else {
            // If the coverage is updated then reset the counter
            TicksNewCoverage = 0
        }
        // Save the current coverage
        oldCoverage = stats.coverage

        // Colours for Low, Mid, Good coverage (Red, Blue, Green)
        switch stats.coverage {
            case 0.10...0.29:
                CoverageColor = "\u{001B}[0;34m"
            case 0.30...1.00:
                CoverageColor = "\u{001B}[0;32m"
            default:
                CoverageColor = "\u{001B}[0;31m"
        }
        // Red colour in case there's a crash
        if stats.crashingSamples != 0 {
            CrashingColor = "\u{001B}[0;31m"
        }

        // Print the actual stats
        print("""
        \u{001B}[2KFuzzer Statistics
        \u{001B}[2K-----------------
        \u{001B}[2KCoverage:                     \(CoverageColor)\(String(format: "%.2f%%", stats.coverage * 100))\u{001B}[0;0m
        \u{001B}[2KCoverage Last Updated:        \(TicksNewCoverage)
        \u{001B}[2KTotal Samples:                \(stats.totalSamples)
        \u{001B}[2KInteresting Samples Found:    \(stats.interestingSamples)
        \u{001B}[2KValid Samples Found:          \(stats.validSamples)
        \u{001B}[2KCorpus Size:                  \(fuzzer.corpus.size)
        \u{001B}[2KSuccess Rate:                 \(String(format: "%.2f%%", stats.successRate * 100))
        \u{001B}[2KTimeout Rate:                 \(String(format: "%.2f%%", stats.timeoutRate * 100))
        \u{001B}[2KDonatepies:                   \(CrashingColor)\(stats.crashingSamples)\u{001B}[0;0m
        \u{001B}[2KTimeouts Hit:                 \(stats.timedOutSamples)
        \u{001B}[2KAvg. program size:            \(String(format: "%.2f", stats.avgProgramSize))
        \u{001B}[2KConnected workers:            \(stats.numWorkers)
        \u{001B}[2KExecs / Second:               \(String(format: "%.2f", stats.execsPerSecond))
        \u{001B}[2KTotal Execs:                  \(stats.totalExecs)
        """)
        print("\u{001B}[2K-----------STATUS MESSAGES---------------")
           
        for msg in self.statusmsgArray {
            msg.count > 120 ? print("\(msg.prefix(120)) ... ") : print("\(msg)")
        }
    }
    
    private enum Color: Int {
        case reset   = 0
        case black   = 30
        case red     = 31
        case green   = 32
        case yellow  = 33
        case blue    = 34
        case magenta = 35
        case cyan    = 36
        case white   = 37
    }
    
    // The color with which to print log entries.
    private let colorForLevel: [LogLevel: Color] = [
        .verbose: .cyan,
        .info:    .white,
        .warning: .yellow,
        .error:   .magenta,
        .fatal:   .red
    ]
}
