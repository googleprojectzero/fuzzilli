diff --git a/Makefile b/Makefile
index 49b1f6f..6ef59c6 100644
--- a/Makefile
+++ b/Makefile
@@ -34,11 +34,11 @@ CONFIG_LTO=y
 # force 32 bit build for some utilities
 #CONFIG_M32=y
 
-ifdef CONFIG_DARWIN
+# ifdef CONFIG_DARWIN
 # use clang instead of gcc
 CONFIG_CLANG=y
 CONFIG_DEFAULT_AR=y
-endif
+# endif
 
 # installation directory
 prefix=/usr/local
@@ -74,6 +74,7 @@ ifdef CONFIG_CLANG
   CFLAGS += -Wunused -Wno-unused-parameter
   CFLAGS += -Wwrite-strings
   CFLAGS += -Wchar-subscripts -funsigned-char
+  CFLAGS += -fsanitize-coverage=trace-pc-guard
   CFLAGS += -MMD -MF $(OBJDIR)/$(@F).d
   ifdef CONFIG_DEFAULT_AR
     AR=$(CROSS_PREFIX)ar
@@ -112,7 +113,7 @@ CFLAGS_DEBUG=$(CFLAGS) -O0
 CFLAGS_SMALL=$(CFLAGS) -Os
 CFLAGS_OPT=$(CFLAGS) -O2
 CFLAGS_NOLTO:=$(CFLAGS_OPT)
-LDFLAGS=-g
+LDFLAGS=-g -fsanitize-coverage=trace-pc-guard
 ifdef CONFIG_LTO
 CFLAGS_SMALL+=-flto
 CFLAGS_OPT+=-flto
diff --git a/qjs.c b/qjs.c
index d56b843..4d503b7 100644
--- a/qjs.c
+++ b/qjs.c
@@ -37,6 +37,9 @@
 #elif defined(__linux__)
 #include <malloc.h>
 #endif
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <fcntl.h>
 
 #include "cutils.h"
 #include "quickjs-libc.h"
@@ -280,6 +283,88 @@ static const JSMallocFunctions trace_mf = {
 
 #define PROG_NAME "qjs"
 
+//
+// BEGIN FUZZING CODE
+//
+
+#define REPRL_CRFD 100
+#define REPRL_CWFD 101
+#define REPRL_DRFD 102
+#define REPRL_DWFD 103
+
+#define SHM_SIZE 0x100000
+#define MAX_EDGES ((SHM_SIZE - 4) * 8)
+
+#define CHECK(cond) if (!(cond)) { fprintf(stderr, "\"" #cond "\" failed\n"); _exit(-1); }
+
+struct shmem_data {
+    uint32_t num_edges;
+    unsigned char edges[];
+};
+
+struct shmem_data* __shmem;
+uint32_t *__edges_start, *__edges_stop;
+
+void __sanitizer_cov_reset_edgeguards() {
+    uint64_t N = 0;
+    for (uint32_t *x = __edges_start; x < __edges_stop && N < MAX_EDGES; x++)
+        *x = ++N;
+}
+
+void __sanitizer_cov_trace_pc_guard_init(uint32_t *start, uint32_t *stop) {
+    // Avoid duplicate initialization
+    if (start == stop || *start)
+        return;
+
+    if (__edges_start != NULL || __edges_stop != NULL) {
+        fprintf(stderr, "Coverage instrumentation is only supported for a single module\n");
+        _exit(-1);
+    }
+
+    __edges_start = start;
+    __edges_stop = stop;
+
+    // Map the shared memory region
+    const char* shm_key = getenv("SHM_ID");
+    if (!shm_key) {
+        puts("[COV] no shared memory bitmap available, skipping");
+        __shmem = (struct shmem_data*) malloc(SHM_SIZE);
+    } else {
+        int fd = shm_open(shm_key, O_RDWR, S_IREAD | S_IWRITE);
+        if (fd <= -1) {
+            fprintf(stderr, "Failed to open shared memory region: %s\n", strerror(errno));
+            _exit(-1);
+        }
+
+        __shmem = (struct shmem_data*) mmap(0, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+        if (__shmem == MAP_FAILED) {
+            fprintf(stderr, "Failed to mmap shared memory region\n");
+            _exit(-1);
+        }
+    }
+
+    __sanitizer_cov_reset_edgeguards();
+
+    __shmem->num_edges = stop - start;
+    printf("[COV] edge counters initialized. Shared memory: %s with %u edges\n", shm_key, __shmem->num_edges);
+}
+
+void __sanitizer_cov_trace_pc_guard(uint32_t *guard) {
+    // There's a small race condition here: if this function executes in two threads for the same
+    // edge at the same time, the first thread might disable the edge (by setting the guard to zero)
+    // before the second thread fetches the guard value (and thus the index). However, our
+    // instrumentation ignores the first edge (see libcoverage.c) and so the race is unproblematic.
+    uint32_t index = *guard;
+    // If this function is called before coverage instrumentation is properly initialized we want to return early.
+    if (!index) return;
+    __shmem->edges[index / 8] |= 1 << (index % 8);
+    *guard = 0;
+}
+
+//
+// END FUZZING CODE
+//
+
 void help(void)
 {
     printf("QuickJS version " CONFIG_VERSION "\n"
@@ -325,6 +410,9 @@ int main(int argc, char **argv)
     int load_jscalc;
 #endif
     size_t stack_size = 0;
+    BOOL reprl_mode = FALSE;
+    int status = 0;
+    int result = EXIT_SUCCESS;
     
 #ifdef CONFIG_BIGNUM
     /* load jscalc runtime if invoked as 'qjscalc' */
@@ -445,6 +533,10 @@ int main(int argc, char **argv)
                 stack_size = (size_t)strtod(argv[optind++], NULL);
                 continue;
             }
+            if (opt == 'r' || !strcmp(longopt, "reprl")) {
+                reprl_mode = TRUE;
+                continue;
+            }
             if (opt) {
                 fprintf(stderr, "qjs: unknown option '-%c'\n", opt);
             } else {
@@ -454,6 +546,19 @@ int main(int argc, char **argv)
         }
     }
 
+    if (reprl_mode) {
+        char helo[] = "HELO";
+        if (write(REPRL_CWFD, helo, 4) != 4 || read(REPRL_CRFD, helo, 4) != 4) {
+            printf("Invalid HELO response from parent\n");
+            reprl_mode = FALSE;
+        }
+
+        if (memcmp(helo, "HELO", 4) != 0) {
+            printf("Invalid response from parent\n");
+            _exit(-1);
+        }
+    }
+
     if (load_jscalc)
         bignum_ext = 1;
 
@@ -509,23 +614,63 @@ int main(int argc, char **argv)
                 goto fail;
         }
 
-        if (expr) {
-            if (eval_buf(ctx, expr, strlen(expr), "<cmdline>", 0))
-                goto fail;
-        } else
-        if (optind >= argc) {
-            /* interactive mode */
-            interactive = 1;
+        if (reprl_mode) {
+            do {
+                size_t script_size = 0;
+                unsigned action;
+                CHECK(read(REPRL_CRFD, &action, 4) == 4);
+                if (action == 'cexe') {
+                    CHECK(read(REPRL_CRFD, &script_size, 8) == 8);
+                } else {
+                    fprintf(stderr, "Unknown action: %u\n", action);
+                    _exit(-1);
+                }
+                char *script_src = (char *)(js_malloc(ctx, script_size+1));
+
+                char *ptr = script_src;
+                size_t remaining = script_size;
+                while (remaining > 0) {
+                    ssize_t rv = read(REPRL_DRFD, ptr, remaining);
+                    if (rv <= 0) {
+                        fprintf(stderr, "Failed to load script\n");
+                        _exit(-1);
+                    }
+                    remaining -= rv;
+                    ptr += rv;
+                }
+                script_src[script_size] = '\0';
+                if (0 == (result = eval_buf(ctx, script_src, script_size, "reprl", 0))) {
+                    js_std_loop(ctx);
+                } else {
+                    fprintf(stderr, "Failed to eval_buf reprl\n");
+                }
+                js_free(ctx, script_src);
+                fflush(stdout);
+                fflush(stderr);
+                // Send return code to parent and reset edge counters.
+                status = (result & 0xff) << 8;
+                CHECK(write(REPRL_CWFD, &status, 4) == 4);
+                __sanitizer_cov_reset_edgeguards();
+            } while (reprl_mode);
         } else {
-            const char *filename;
-            filename = argv[optind];
-            if (eval_file(ctx, filename, module))
-                goto fail;
-        }
-        if (interactive) {
-            js_std_eval_binary(ctx, qjsc_repl, qjsc_repl_size, 0);
+            if (expr) {
+                if (eval_buf(ctx, expr, strlen(expr), "<cmdline>", 0))
+                    goto fail;
+            } else
+            if (optind >= argc) {
+                /* interactive mode */
+                interactive = 1;
+            } else {
+                const char *filename;
+                filename = argv[optind];
+                if (eval_file(ctx, filename, module))
+                    goto fail;
+            }
+            // if (interactive) {
+            //     js_std_eval_binary(ctx, qjsc_repl, qjsc_repl_size, 0);
+            // }
+            js_std_loop(ctx);
         }
-        js_std_loop(ctx);
     }
     
     if (dump_memory) {
diff --git a/quickjs.c b/quickjs.c
index 7916013..666fb6d 100644
--- a/quickjs.c
+++ b/quickjs.c
@@ -35408,6 +35408,47 @@ static JSValue JS_ReadFunctionTag(BCReaderState *s)
     return JS_EXCEPTION;
 }
 
+#define REPRL_DWFD 103
+static JSValue js_fuzzilli(JSContext *ctx, JSValueConst this_val, int argc,
+                           JSValueConst *argv) {
+    const char* str = JS_ToCString(ctx, argv[0]);
+    if (!str) {
+        return JS_FALSE;
+    }
+    if (!strcmp(str, "FUZZILLI_CRASH")) {
+        int type;
+        if (JS_ToInt32(ctx, &type, argv[1])) {
+            JS_FreeCString(ctx, str);
+            return JS_FALSE;
+        }
+        switch (type) {
+        case 0:
+            *((int*)0x41414141) = 0x1337;
+            break;
+        case 1:
+            assert(0);
+            break;
+        default:
+            assert(0);
+            break;
+        }
+    } else if (!strcmp(str, "FUZZILLI_PRINT") && argc > 1) {
+        FILE* fzliout = fdopen(REPRL_DWFD, "w");
+        if (!fzliout) {
+            fprintf(stderr, "Fuzzer output channel not available, printing to stdout instead\n");
+            fzliout = stdout;
+        }
+        const char* print_str = JS_ToCString(ctx, argv[1]);
+        if (print_str) {
+            fprintf(fzliout, "%s\n", print_str);
+            JS_FreeCString(ctx, print_str);
+        }
+        fflush(fzliout);
+    }
+    JS_FreeCString(ctx, str);
+    return JS_TRUE;
+}
+
 static JSValue JS_ReadModule(BCReaderState *s)
 {
     JSContext *ctx = s->ctx;
@@ -47856,6 +47897,7 @@ static JSValue js_global_unescape(JSContext *ctx, JSValueConst this_val,
 
 static const JSCFunctionListEntry js_global_funcs[] = {
     JS_CFUNC_DEF("parseInt", 2, js_parseInt ),
+    JS_CFUNC_DEF("fuzzilli", 2, js_fuzzilli),
     JS_CFUNC_DEF("parseFloat", 1, js_parseFloat ),
     JS_CFUNC_DEF("isNaN", 1, js_global_isNaN ),
     JS_CFUNC_DEF("isFinite", 1, js_global_isFinite ),
