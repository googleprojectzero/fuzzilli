diff --git a/jerry-main/main-unix.c b/jerry-main/main-unix.c
index 367f5096..36ff099e 100644
--- a/jerry-main/main-unix.c
+++ b/jerry-main/main-unix.c
@@ -49,6 +49,99 @@
 
 static uint8_t buffer[ JERRY_BUFFER_SIZE ];
 
+//
+// BEGIN FUZZING CODE
+//
+
+#include <fcntl.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sys/stat.h>
+#include <sys/wait.h>
+#include <sys/mman.h>
+
+#define REPRL_CRFD 100
+#define REPRL_CWFD 101
+#define REPRL_DRFD 102
+#define REPRL_DWFD 103
+
+#define SHM_SIZE 0x100000
+#define MAX_EDGES ((SHM_SIZE - 4) * 8)
+
+#ifndef DCHECK
+#define DCHECK(condition) { assert(condition); abort(); }
+#endif
+
+#ifndef CHECK
+#define CHECK DCHECK
+#endif
+
+struct shmem_data {
+    uint32_t num_edges;
+    unsigned char edges[];
+};
+
+struct shmem_data* __shmem;
+uint32_t *__edges_start, *__edges_stop;
+
+void __sanitizer_cov_reset_edgeguards() {
+    uint32_t N = 0;
+    for (uint32_t *x = __edges_start; x < __edges_stop && N < MAX_EDGES; x++)
+        *x = ++N;
+}
+
+void __sanitizer_cov_trace_pc_guard_init(uint32_t *start, uint32_t *stop) {
+    // Avoid duplicate initialization
+    if (start == stop || *start)
+        return;
+
+    if (__edges_start != NULL || __edges_stop != NULL) {
+        fprintf(stderr, "Coverage instrumentation is only supported for a single module\n");
+        _exit(-1);
+    }
+
+    __edges_start = start;
+    __edges_stop = stop;
+
+    // Map the shared memory region
+    const char* shm_key = getenv("SHM_ID");
+    if (!shm_key) {
+        puts("[COV] no shared memory bitmap available, skipping");
+        __shmem = (struct shmem_data*) malloc(SHM_SIZE);
+    } else {
+        int fd = shm_open(shm_key, O_RDWR, S_IRUSR | S_IWUSR);
+        if (fd <= -1) {
+            fprintf(stderr, "Failed to open shared memory region: %s\n", strerror(errno));
+            _exit(-1);
+        }
+
+        __shmem = (struct shmem_data*) mmap(0, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+        if (__shmem == MAP_FAILED) {
+            fprintf(stderr, "Failed to mmap shared memory region\n");
+            _exit(-1);
+        }
+    }
+
+    __sanitizer_cov_reset_edgeguards();
+
+    __shmem->num_edges = (uint32_t) (stop - start);
+    printf("[COV] edge counters initialized. Shared memory: %s with %u edges\n", shm_key, __shmem->num_edges);
+}
+
+void __sanitizer_cov_trace_pc_guard(uint32_t *guard) {
+    // There's a small race condition here: if this function executes in two threads for the same
+    // edge at the same time, the first thread might disable the edge (by setting the guard to zero)
+    // before the second thread fetches the guard value (and thus the index). However, our
+    // instrumentation ignores the first edge (see libcoverage.c) and so the race is unproblematic.
+    uint32_t index = *guard;
+    __shmem->edges[index / 8] |= 1 << (index % 8);
+    *guard = 0;
+}
+
+//
+// END FUZZING CODE
+//
+
 static const uint32_t *
 read_file (const char *file_name,
            size_t *out_size_p)
@@ -330,7 +423,8 @@ typedef enum
   OPT_EXEC_SNAP_FUNC,
   OPT_LOG_LEVEL,
   OPT_NO_PROMPT,
-  OPT_CALL_ON_EXIT
+  OPT_CALL_ON_EXIT,
+  OPT_REPRL_FUZZILLI
 } main_opt_id_t;
 
 /**
@@ -372,10 +466,157 @@ static const cli_opt_t main_opts[] =
                .help = "don't print prompt in REPL mode"),
   CLI_OPT_DEF (.id = OPT_CALL_ON_EXIT, .longopt = "call-on-exit", .meta = "STRING",
                .help = "invoke the specified function when the process is just about to exit"),
+  CLI_OPT_DEF (.id = OPT_REPRL_FUZZILLI, .longopt = "reprl-fuzzilli",
+               .help = "use only with the fuzzilli reprl library"),
   CLI_OPT_DEF (.id = CLI_OPT_DEFAULT, .meta = "FILE",
                .help = "input JS file(s) (If file is -, read standard input.)")
 };
 
+// We have to assume that the fuzzer will be able to call this function e.g. by
+// enumerating the properties of the global object and eval'ing them. As such
+// this function is implemented in a way that requires passing some magic value
+// as first argument (with the idea being that the fuzzer won't be able to
+// generate this value) which then also acts as a selector for the operation
+// to perform.
+jerry_value_t
+jerryx_handler_fuzzilli (const jerry_value_t func_obj_val, /**< function object */
+                      const jerry_value_t this_p, /**< this arg */
+                      const jerry_value_t args_p[], /**< function arguments */
+                      const jerry_length_t args_cnt) /**< number of function arguments */
+{
+  (void) func_obj_val; /* unused */
+  (void) this_p; /* unused */
+
+  jerry_char_t operation[256] = {0};
+  jerry_value_t ret_val = jerry_create_undefined ();
+
+  if (args_cnt > 0 && jerry_value_is_string(args_p[0]))
+  {
+    jerry_value_t str_val;
+    str_val = jerry_value_to_string (args_p[0]);
+
+    if (!jerry_value_is_error(str_val))
+    {
+      jerry_length_t length = jerry_get_utf8_string_length (str_val);
+
+      if (length > 0 && length < 256)
+      {
+        jerry_string_to_utf8_char_buffer(str_val, operation, length);
+      }
+    }
+
+    jerry_release_value (str_val);
+  }
+
+  if (strcmp((char *)operation, "FUZZILLI_CRASH") == 0)
+  {
+    if (args_cnt == 2 && jerry_value_is_number(args_p[1]))
+    {
+      int arg = (int) jerry_get_number_value(args_p[1]);
+      switch (arg)
+      {
+        case 0:
+          *((int*)0x41414141) = 0x1337;
+          break;
+        default:
+          DCHECK(false);
+          break;
+      }
+    }
+  }
+  else if (strcmp((char *)operation, "FUZZILLI_PRINT") == 0)
+  {
+    static FILE* fzliout;
+    fzliout = fdopen(REPRL_DWFD, "w");
+    if (!fzliout) {
+      fprintf(stderr, "Fuzzer output channel not available, printing to stdout instead\n");
+      fzliout = stdout;
+    }
+
+    /* Based on the jerryx_handler_print handler */
+    const char * const null_str = "\\u0000";
+
+    for (jerry_length_t arg_index = 1; arg_index < args_cnt; arg_index++)
+    {
+      jerry_value_t str_val;
+
+      if (jerry_value_is_symbol (args_p[arg_index]))
+      {
+        str_val = jerry_get_symbol_descriptive_string (args_p[arg_index]);
+      }
+      else
+      {
+        str_val = jerry_value_to_string (args_p[arg_index]);
+      }
+
+      if (jerry_value_is_error (str_val))
+      {
+        /* There is no need to free the undefined value. */
+        ret_val = str_val;
+        break;
+      }
+
+      jerry_length_t length = jerry_get_utf8_string_length (str_val);
+      jerry_length_t substr_pos = 0;
+      jerry_char_t substr_buf[256];
+
+      do
+      {
+        jerry_size_t substr_size = jerry_substring_to_utf8_char_buffer (str_val,
+                                                                        substr_pos,
+                                                                        length,
+                                                                        substr_buf,
+                                                                        256 - 1);
+
+        jerry_char_t *buf_end_p = substr_buf + substr_size;
+
+        /* Update start position by the number of utf-8 characters. */
+        for (jerry_char_t *buf_p = substr_buf; buf_p < buf_end_p; buf_p++)
+        {
+          /* Skip intermediate utf-8 octets. */
+          if ((*buf_p & 0xc0) != 0x80)
+          {
+            substr_pos++;
+          }
+        }
+
+        if (substr_pos == length)
+        {
+          *buf_end_p++ = (arg_index < args_cnt - 1) ? ' ' : '\n';
+        }
+
+        for (jerry_char_t *buf_p = substr_buf; buf_p < buf_end_p; buf_p++)
+        {
+          char chr = (char) *buf_p;
+
+          if (chr != '\0')
+          {
+            putc (chr, fzliout);
+            continue;
+          }
+
+          for (jerry_size_t null_index = 0; null_str[null_index] != '\0'; null_index++)
+          {
+            putc (null_str[null_index], fzliout);
+          }
+        }
+      }
+      while (substr_pos < length);
+
+      jerry_release_value (str_val);
+    }
+
+    if (args_cnt == 0 || jerry_value_is_error (ret_val))
+    {
+      putc ('\n', fzliout);
+    }
+    fflush(fzliout);
+  }
+  return ret_val;
+}
+
+
+
 /**
  * Check whether JerryScript has a requested feature enabled or not. If not,
  * print a warning message.
@@ -467,6 +708,7 @@ init_engine (jerry_init_flag_t flags, /**< initialized flags for the engine */
   register_js_function ("gc", jerryx_handler_gc);
   register_js_function ("print", jerryx_handler_print);
   register_js_function ("resourceName", jerryx_handler_resource_name);
+  register_js_function ("fuzzilli", jerryx_handler_fuzzilli);
 } /* init_engine */
 
 int
@@ -499,6 +741,7 @@ main (int argc,
   bool is_repl_mode = false;
   bool is_wait_mode = false;
   bool no_prompt = false;
+  bool reprl_fuzzilli_mode = false;
 
   const char *exit_cb = NULL;
 
@@ -549,6 +792,11 @@ main (int argc,
         exit_cb = cli_consume_string (&cli_state);
         break;
       }
+      case OPT_REPRL_FUZZILLI:
+      {
+        reprl_fuzzilli_mode = true;
+        break;
+      }
       case OPT_SHOW_RE_OP:
       {
         if (check_feature (JERRY_FEATURE_REGEXP_DUMP, cli_state.arg))
@@ -695,6 +943,24 @@ main (int argc,
     debug_channel = "";
   }
 
+  // Let parent know we are ready
+  if (reprl_fuzzilli_mode)
+  {
+    char helo[] = "HELO";
+    if (write(REPRL_CWFD, helo, 4) != 4 ||
+      read(REPRL_CRFD, helo, 4) != 4) {
+      reprl_fuzzilli_mode = false;
+    }
+
+    if (memcmp(helo, "HELO", 4) != 0) {
+      fprintf(stderr, "Invalid response from parent\n");
+      _exit(-1);
+    }
+  }
+
+  do {
+  // Keep original indention here for easier diffing against newer versions
+
   init_engine (flags, debug_channel, debug_protocol, debug_port, debug_serial_config);
 
   jerry_value_t ret_value = jerry_create_undefined ();
@@ -874,8 +1140,18 @@ main (int argc,
 
       printf ("%s", prompt);
 
+      if (reprl_fuzzilli_mode) {
+        unsigned action = 0;
+        ssize_t nread = read(REPRL_CRFD, &action, 4);
+        fflush(0);
+        if (nread != 4 || action != 0x63657865) { // 'exec'
+          fprintf(stderr, "Unknown action: %x\n", action);
+          _exit(-1);
+        }
+      }
+
       /* Read a line */
-      while (true)
+      while (!reprl_fuzzilli_mode)
       {
         if (fread (source_buffer_tail, 1, 1, stdin) != 1)
         {
@@ -891,8 +1167,33 @@ main (int argc,
       }
       *source_buffer_tail = 0;
 
+      if (reprl_fuzzilli_mode)
+      {
+        size_t script_size = 0;
+        read(REPRL_CRFD, &script_size, 8);
+        source_buffer_tail = buffer;
+        ssize_t remaining = (ssize_t) script_size;
+        while (remaining > 0)
+        {
+          ssize_t rv = read(REPRL_DRFD, source_buffer_tail, (size_t) remaining);
+          if (rv <= 0) {
+            fprintf(stderr, "Failed to load script\n");
+            _exit(-1);
+          }
+          remaining -= rv;
+          source_buffer_tail += rv;
+        }
+        buffer[script_size] = 0;
+        len = script_size;
+
+        // we have to do this to reset the state
+        is_done = true;
+      }
+
       if (len > 0)
       {
+        int status_rc = 0;
+
         if (!jerry_is_valid_utf8_string (buffer, (jerry_size_t) len))
         {
           jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: Input must be a valid UTF-8 string.\n");
@@ -933,15 +1234,25 @@ main (int argc,
         }
         else
         {
+          status_rc = 1;
           ret_val = jerry_get_value_from_error (ret_val, true);
           print_unhandled_exception (ret_val);
         }
 
+        // REPRL: send result to parent and reset edge guards
+        if (reprl_fuzzilli_mode) {
+          status_rc <<= 8;
+          if (write(REPRL_CWFD, &status_rc, 4) != 4)
+            _exit(1);
+          __sanitizer_cov_reset_edgeguards();
+        }
+
         jerry_release_value (ret_val);
       }
     }
   }
 
+
   int ret_code = JERRY_STANDALONE_EXIT_CODE_OK;
 
   if (jerry_value_is_error (ret_value))
@@ -995,5 +1306,10 @@ main (int argc,
 #if defined (JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1)
   free (context_p);
 #endif /* defined (JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1) */
+
+  if (!reprl_fuzzilli_mode) {
   return ret_code;
+  }
+  } while (reprl_fuzzilli_mode);
+
 } /* main */
