diff --git a/js/src/shell/js.cpp b/js/src/shell/js.cpp
index f93938a4ba03..b527e01bf093 100644
--- a/js/src/shell/js.cpp
+++ b/js/src/shell/js.cpp
@@ -166,6 +166,84 @@ using mozilla::TimeStamp;
 using mozilla::Utf8Unit;
 using mozilla::Variant;
 
+//
+// BEGIN FUZZING CODE
+//
+
+#define REPRL_CRFD 100
+#define REPRL_CWFD 101
+#define REPRL_DRFD 102
+#define REPRL_DWFD 103
+
+#define SHM_SIZE 0x100000
+#define MAX_EDGES ((SHM_SIZE - 4) * 8)
+
+#define CHECK(cond) if (!(cond)) { fprintf(stderr, "\"" #cond "\" failed\n"); _exit(-1); }
+
+struct shmem_data {
+    uint32_t num_edges;
+    unsigned char edges[];
+};
+
+struct shmem_data* __shmem;
+
+uint32_t *__edges_start, *__edges_stop;
+void __sanitizer_cov_reset_edgeguards() {
+    uint64_t N = 0;
+    for (uint32_t *x = __edges_start; x < __edges_stop && N < MAX_EDGES; x++)
+        *x = ++N;
+}
+
+extern "C" void __sanitizer_cov_trace_pc_guard_init(uint32_t *start, uint32_t *stop) {
+    // Avoid duplicate initialization
+    if (start == stop || *start)
+        return;
+
+    if (__edges_start != NULL || __edges_stop != NULL) {
+        fprintf(stderr, "Coverage instrumentation is only supported for a single module\n");
+        _exit(-1);
+    }
+
+    __edges_start = start;
+    __edges_stop = stop;
+
+    // Map the shared memory region
+    const char* shm_key = getenv("SHM_ID");
+    if (!shm_key) {
+        puts("[COV] no shared memory bitmap available, skipping");
+        __shmem = (struct shmem_data*) malloc(SHM_SIZE);
+    } else {
+        int fd = shm_open(shm_key, O_RDWR, S_IREAD | S_IWRITE);
+        if (fd <= -1) {
+            fprintf(stderr, "Failed to open shared memory region: %s\n", strerror(errno));
+            _exit(-1);
+        }
+
+        __shmem = (struct shmem_data*) mmap(0, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+        if (__shmem == MAP_FAILED) {
+            fprintf(stderr, "Failed to mmap shared memory region\n");
+            _exit(-1);
+        }
+    }
+
+    __sanitizer_cov_reset_edgeguards();
+
+    __shmem->num_edges = stop - start;
+    printf("[COV] edge counters initialized. Shared memory: %s with %u edges\n", shm_key, __shmem->num_edges);
+}
+
+extern "C" void __sanitizer_cov_trace_pc_guard(uint32_t *guard) {
+    if (!*guard) return;
+    uint32_t index = *guard - 1;
+    __shmem->edges[index / 8] |= 1 << (index % 8);
+    *guard = 0;
+}
+
+//
+// END FUZZING CODE
+//
+
+
 enum JSShellExitCode {
   EXITCODE_RUNTIME_ERROR = 3,
   EXITCODE_FILE_NOT_FOUND = 4,
@@ -3688,6 +3766,64 @@ static bool Clone(JSContext* cx, unsigned argc, Value* vp) {
   return true;
 }
 
+// We have to assume that the fuzzer will be able to call this function e.g. by
+// enumerating the properties of the global object and eval'ing them. As such
+// this function is implemented in a way that requires passing some magic value
+// as first argument (with the idea being that the fuzzer won't be able to
+// generate this value) which then also acts as a selector for the operation
+// to perform.
+static bool Fuzzilli(JSContext* cx, unsigned argc, Value* vp) {
+  CallArgs args = CallArgsFromVp(argc, vp);
+
+  RootedString arg(cx, JS::ToString(cx, args.get(0)));
+  if (!arg) {
+    return false;
+  }
+  RootedLinearString operation(cx, StringToLinearString(cx, arg));
+  if (!operation) {
+    return false;
+  }
+
+  if (StringEqualsAscii(operation, "FUZZILLI_CRASH")) {
+    int type;
+    if (!ToInt32(cx, args.get(1), &type)) {
+      return false;
+    }
+
+    switch (type) {
+      case 0:
+        *((int*)0x41414141) = 0x1337;
+        break;
+      case 1:
+        MOZ_RELEASE_ASSERT(false);
+        break;
+      default:
+        MOZ_ASSERT(false);
+        break;
+    }
+  } else if (StringEqualsAscii(operation, "FUZZILLI_PRINT")) {
+    static FILE* fzliout = fdopen(REPRL_DWFD, "w");
+    if (!fzliout) {
+      fprintf(stderr, "Fuzzer output channel not available, printing to stdout instead\n");
+      fzliout = stdout;
+    }
+
+    RootedString str(cx, JS::ToString(cx, args.get(1)));
+    if (!str) {
+      return false;
+    }
+    UniqueChars bytes = JS_EncodeStringToUTF8(cx, str);
+    if (!bytes) {
+      return false;
+    }
+    fprintf(fzliout, "%s\n", bytes.get());
+    fflush(fzliout);
+  }
+
+  args.rval().setUndefined();
+  return true;
+}
+
 static bool Crash(JSContext* cx, unsigned argc, Value* vp) {
   CallArgs args = CallArgsFromVp(argc, vp);
   if (args.length() == 0) {
@@ -9043,6 +9179,10 @@ JS_FN_HELP("parseBin", BinParse, 1, 0,
 "    object: Don't create a new DOM object, but instead use the supplied\n"
 "            FakeDOMObject."),
 
+    JS_FN_HELP("fuzzilli", Fuzzilli, 0, 0,
+"fuzzilli(operation, arg)",
+"  Exposes functionality used by the Fuzzilli JavaScript fuzzer."),
+
     JS_FS_HELP_END
 };
 // clang-format on
@@ -10048,6 +10188,57 @@ static MOZ_MUST_USE bool ProcessArgs(JSContext* cx, OptionParser* op) {
   binASTPaths = op->getMultiStringOption('B');
 #endif  // JS_BUILD_BINAST
 
+  // Check for REPRL file source
+  if (op->getBoolOption("reprl")) {
+    size_t script_size = 0;
+
+    unsigned action;
+    CHECK(read(REPRL_CRFD, &action, 4) == 4);
+    if (action == 'cexe') {
+      CHECK(read(REPRL_CRFD, &script_size, 8) == 8);
+    } else {
+      fprintf(stderr, "Unknown action: %u\n", action);
+      _exit(-1);
+    }
+
+    CompileOptions options(cx);
+    options.setIntroductionType("reprl")
+        .setFileAndLine("reprl", 1)
+        .setIsRunOnce(true)
+        .setNoScriptRval(true);
+
+
+    char* script_src = static_cast<char*>(js_malloc(script_size));
+
+    char* ptr = script_src;
+    size_t remaining = script_size;
+    while (remaining > 0) {
+      ssize_t rv = read(REPRL_DRFD, ptr, remaining);
+      if (rv <= 0) {
+        fprintf(stderr, "Failed to load script\n");
+        _exit(-1);
+      }
+      remaining -= rv;
+      ptr += rv;
+    }
+
+    JS::SourceText<Utf8Unit> srcBuf;
+    if (!srcBuf.init(cx, script_src, script_size, JS::SourceOwnership::TakeOwnership)) {
+      return false;
+    }
+
+    RootedScript script(cx, JS::Compile(cx, options, srcBuf));
+    if (!script) {
+      return false;
+    }
+
+    if (!JS_ExecuteScript(cx, script)) {
+      return false;
+    }
+
+    return true;
+  }
+
   if (filePaths.empty() && utf8FilePaths.empty() && codeChunks.empty() &&
       modulePaths.empty() && binASTPaths.empty() &&
       !op->getStringArg("script")) {
@@ -10712,6 +10903,27 @@ static int Shell(JSContext* cx, OptionParser* op, char** envp) {
     defaultToSameCompartment = false;
   }
 
+  // Check if we should use REPRL mode
+  bool reprl_mode = op->getBoolOption("reprl");
+  if (reprl_mode) {
+    // Check in with parent
+    char helo[] = "HELO";
+    if (write(REPRL_CWFD, helo, 4) != 4 ||
+        read(REPRL_CRFD, helo, 4) != 4) {
+      reprl_mode = false;
+    }
+
+    if (memcmp(helo, "HELO", 4) != 0) {
+      fprintf(stderr, "Invalid response from parent\n");
+      _exit(-1);
+    }
+  }
+
+  // Begin REPRL Loop
+  int result = EXIT_SUCCESS;
+  do {
+  // Keep original indention here for easier diffing against newer versions
+
   JS::RealmOptions options;
   SetStandardRealmOptions(options);
   RootedObject glob(
@@ -10723,7 +10935,8 @@ static int Shell(JSContext* cx, OptionParser* op, char** envp) {
   JSAutoRealm ar(cx, glob);
 
   ShellContext* sc = GetShellContext(cx);
-  int result = EXIT_SUCCESS;
+  sc->exitCode = 0;
+  result = EXIT_SUCCESS;
   {
     AutoReportException are(cx);
     if (!ProcessArgs(cx, op) && !sc->quitting) {
@@ -10753,6 +10966,16 @@ static int Shell(JSContext* cx, OptionParser* op, char** envp) {
     result = sc->exitCode;
   }
 
+  if (reprl_mode) {
+    // Send return code to parent and reset edge counters.
+    int status = result << 8;
+    CHECK(write(REPRL_CWFD, &status, 4) == 4);
+    __sanitizer_cov_reset_edgeguards();
+  }
+
+  // End REPRL loop
+  } while (reprl_mode);
+
   if (enableDisassemblyDumps) {
     AutoReportException are(cx);
     if (!js::DumpRealmPCCounts(cx)) {
@@ -11121,7 +11344,9 @@ int main(int argc, char** argv, char** envp) {
                         "Suppress crash minidumps") ||
       !op.addBoolOption('\0', "wasm-compile-and-serialize",
                         "Compile the wasm bytecode from stdin and serialize "
-                        "the results to stdout")) {
+                        "the results to stdout") ||
+      !op.addBoolOption('\0', "reprl",
+                        "Enable REPRL mode for fuzzing")) {
     return EXIT_FAILURE;
   }
 
