diff --git a/Source/JavaScriptCore/jsc.cpp b/Source/JavaScriptCore/jsc.cpp
index ef8044b535f..21337cb98ba 100644
--- a/Source/JavaScriptCore/jsc.cpp
+++ b/Source/JavaScriptCore/jsc.cpp
@@ -152,7 +152,92 @@ struct MemoryFootprint {
 #if !defined(PATH_MAX)
 #define PATH_MAX 4096
 #endif
+//
+// BEGIN FUZZING CODE
+//
 
+#include <fcntl.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/wait.h>
+#include <sys/mman.h>
+
+#define REPRL_CRFD 100
+#define REPRL_CWFD 101
+#define REPRL_DRFD 102
+#define REPRL_DWFD 103
+
+#define SHM_SIZE 0x100000
+#define MAX_EDGES ((SHM_SIZE - 4) * 8)
+
+#define CHECK(cond) if (!(cond)) { fprintf(stderr, "\"" #cond "\" failed\n"); _exit(-1); }
+
+struct shmem_data {
+    uint32_t num_edges;
+    unsigned char edges[];
+};
+
+struct shmem_data* __shmem;
+uint32_t *__edges_start, *__edges_stop;
+
+void __sanitizer_cov_reset_edgeguards() {
+    uint64_t N = 0;
+    for (uint32_t *x = __edges_start; x < __edges_stop && N < MAX_EDGES; x++)
+        *x = ++N;
+}
+
+extern "C" void __sanitizer_cov_trace_pc_guard_init(uint32_t *start, uint32_t *stop) {
+    // Avoid duplicate initialization
+    if (start == stop || *start)
+        return;
+
+    if (__edges_start != NULL || __edges_stop != NULL) {
+        fprintf(stderr, "Coverage instrumentation is only supported for a single module\n");
+        _exit(-1);
+    }
+
+    __edges_start = start;
+    __edges_stop = stop;
+
+    // Map the shared memory region
+    const char* shm_key = getenv("SHM_ID");
+    if (!shm_key) {
+        puts("[COV] no shared memory bitmap available, skipping");
+        __shmem = (struct shmem_data*) malloc(SHM_SIZE);
+    } else {
+        int fd = shm_open(shm_key, O_RDWR, S_IREAD | S_IWRITE);
+        if (fd <= -1) {
+            fprintf(stderr, "Failed to open shared memory region: %s\n", strerror(errno));
+            _exit(-1);
+        }
+
+        __shmem = (struct shmem_data*) mmap(0, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+        if (__shmem == MAP_FAILED) {
+            fprintf(stderr, "Failed to mmap shared memory region\n");
+            _exit(-1);
+        }
+    }
+
+    __sanitizer_cov_reset_edgeguards();
+
+    __shmem->num_edges = stop - start;
+    printf("[COV] edge counters initialized. Shared memory: %s with %u edges\n", shm_key, __shmem->num_edges);
+}
+
+extern "C" void __sanitizer_cov_trace_pc_guard(uint32_t *guard) {
+    // There's a small race condition here: if this function executes in two threads for the same
+    // edge at the same time, the first thread might disable the edge (by setting the guard to zero)
+    // before the second thread fetches the guard value (and thus the index). However, our
+    // instrumentation ignores the first edge (see libcoverage.c) and so the race is unproblematic.
+    uint32_t index = *guard;
+    __shmem->edges[index / 8] |= 1 << (index % 8);
+    *guard = 0;
+}
+
+//
+// END FUZZING CODE
+//
 using namespace JSC;
 
 namespace {
@@ -350,6 +435,7 @@ static EncodedJSValue JSC_HOST_CALL functionFlashHeapAccess(JSGlobalObject*, Cal
 static EncodedJSValue JSC_HOST_CALL functionDisableRichSourceInfo(JSGlobalObject*, CallFrame*);
 static EncodedJSValue JSC_HOST_CALL functionMallocInALoop(JSGlobalObject*, CallFrame*);
 static EncodedJSValue JSC_HOST_CALL functionTotalCompileTime(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL functionFuzzilli(JSGlobalObject*, CallFrame*);
 
 static EncodedJSValue JSC_HOST_CALL functionSetUnhandledRejectionCallback(JSGlobalObject*, CallFrame*);
 static EncodedJSValue JSC_HOST_CALL functionAsDoubleNumber(JSGlobalObject*, CallFrame*);
@@ -620,6 +706,8 @@ private:
         addFunction(vm, "mallocInALoop", functionMallocInALoop, 0);
         addFunction(vm, "totalCompileTime", functionTotalCompileTime, 0);
 
+        addFunction(vm, "fuzzilli", functionFuzzilli, 2);
+
         addFunction(vm, "setUnhandledRejectionCallback", functionSetUnhandledRejectionCallback, 1);
 
         addFunction(vm, "asDoubleNumber", functionAsDoubleNumber, 1);
@@ -1250,6 +1338,54 @@ fail:
 
 EncodedJSValue JSC_HOST_CALL functionPrintStdOut(JSGlobalObject* globalObject, CallFrame* callFrame) { return printInternal(globalObject, callFrame, stdout); }
 EncodedJSValue JSC_HOST_CALL functionPrintStdErr(JSGlobalObject* globalObject, CallFrame* callFrame) { return printInternal(globalObject, callFrame, stderr); }
+// We have to assume that the fuzzer will be able to call this function e.g. by
+// enumerating the properties of the global object and eval'ing them. As such
+// this function is implemented in a way that requires passing some magic value
+// as first argument (with the idea being that the fuzzer won't be able to
+// generate this value) which then also acts as a selector for the operation
+// to perform.
+EncodedJSValue JSC_HOST_CALL functionFuzzilli(JSGlobalObject* globalObject, CallFrame* callFrame)
+{
+    VM& vm = globalObject->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+    if (!callFrame->argument(0).isString()) {
+        // We directly require a string as argument for simplicity
+        return JSValue::encode(jsUndefined());
+    }
+    auto operation = callFrame->argument(0).toString(globalObject)->value(globalObject);
+    RETURN_IF_EXCEPTION(scope, encodedJSValue());
+
+    if (operation == "FUZZILLI_CRASH") {
+        auto arg = callFrame->argument(1).toInt32(globalObject);
+        RETURN_IF_EXCEPTION(scope, encodedJSValue());
+        switch (arg) {
+            case 0:
+                *((int*)0x41414141) = 0x1337;
+                break;
+            case 1:
+                RELEASE_ASSERT(0);
+                break;
+            case 2:
+                ASSERT(0);
+                break;
+        }
+    } else if (operation == "FUZZILLI_PRINT") {
+        static FILE* fzliout = fdopen(REPRL_DWFD, "w");
+        if (!fzliout) {
+            fprintf(stderr, "Fuzzer output channel not available, printing to stdout instead\n");
+            fzliout = stdout;
+        }
+
+        auto viewWithString = callFrame->argument(1).toString(globalObject)->viewWithUnderlyingString(globalObject);
+        RETURN_IF_EXCEPTION(scope, encodedJSValue());
+        auto string = cStringFromViewWithString(globalObject, scope, viewWithString);
+        RETURN_IF_EXCEPTION(scope, encodedJSValue());
+        fprintf(fzliout, "%s\n", string.data());
+        fflush(fzliout);
+    }
+
+    return JSValue::encode(jsUndefined());
+}
 
 EncodedJSValue JSC_HOST_CALL functionDebug(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
@@ -1889,7 +2025,7 @@ EncodedJSValue JSC_HOST_CALL functionDollarAgentStart(JSGlobalObject* globalObje
             commandLine.m_interactive = false;
             runJSC(
                 commandLine, true,
-                [&] (VM&, GlobalObject* globalObject, bool& success) {
+                [&] (VM&, GlobalObject* globalObject, bool& success, int fd, size_t size) {
                     // Notify the thread that started us that we have registered a worker.
                     {
                         auto locker = holdLock(didStartLock);
@@ -2724,7 +2860,7 @@ static void checkException(GlobalObject* globalObject, bool isLastFile, bool has
         success = success && checkUncaughtException(vm, globalObject, (hasException) ? value : JSValue(), options);
 }
 
-static void runWithOptions(GlobalObject* globalObject, CommandLine& options, bool& success)
+static void runWithOptions(GlobalObject* globalObject, CommandLine& options, bool& success, int fd, size_t readsize)
 {
     Vector<Script>& scripts = options.m_scripts;
     String fileName;
@@ -2740,7 +2876,21 @@ static void runWithOptions(GlobalObject* globalObject, CommandLine& options, boo
     for (size_t i = 0; i < scripts.size(); i++) {
         JSInternalPromise* promise = nullptr;
         bool isModule = options.m_module || scripts[i].scriptType == Script::ScriptType::Module;
-        if (scripts[i].codeSource == Script::CodeSource::File) {
+        if (fd != -1) {
+            scriptBuffer.resize(readsize);
+            char* ptr = scriptBuffer.data();
+            size_t remaining = readsize;
+            while (remaining > 0) {
+                ssize_t rv = read(fd, ptr, remaining);
+                if (rv <= 0) {
+                    fprintf(stderr, "Failed to load script\n");
+                    _exit(-1);
+                }
+                remaining -= rv;
+                ptr += rv;
+            }
+            fileName = "fuzzcode.js"_s;
+        } else if (scripts[i].codeSource == Script::CodeSource::File) {
             fileName = scripts[i].argument;
             if (scripts[i].strictMode == Script::StrictMode::Strict)
                 scriptBuffer.append("\"use strict\";\n", strlen("\"use strict\";\n"));
@@ -3111,7 +3261,40 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
     
     VM& vm = VM::create(LargeHeap).leakRef();
     int result;
-    bool success = true;
+    bool success;
+
+    // Let parent know we are ready
+    bool reprl_mode = true;
+    char helo[] = "HELO";
+    if (write(REPRL_CWFD, helo, 4) != 4 ||
+        read(REPRL_CRFD, helo, 4) != 4) {
+        reprl_mode = false;
+    }
+
+    if (memcmp(helo, "HELO", 4) != 0) {
+        fprintf(stderr, "Invalid response from parent\n");
+        _exit(-1);
+    }
+
+    do {
+    // Keep indention for easier diffing
+    int fd = -1;
+    size_t script_size = 0;
+
+    if (reprl_mode) {
+        unsigned action;
+        CHECK(read(REPRL_CRFD, &action, 4) == 4);
+        if (action == 'cexe') {
+            CHECK(read(REPRL_CRFD, &script_size, 8) == 8);
+            fd = REPRL_DRFD;
+        } else {
+            fprintf(stderr, "Unknown action: %u\n", action);
+            _exit(-1);
+        }
+    }
+
+    success = true;
+
     GlobalObject* globalObject = nullptr;
     {
         JSLockHolder locker(vm);
@@ -3122,7 +3305,7 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
 
         globalObject = GlobalObject::create(vm, GlobalObject::createStructure(vm, jsNull()), options.m_arguments);
         globalObject->setRemoteDebuggingEnabled(options.m_enableRemoteDebugging);
-        func(vm, globalObject, success);
+        func(vm, globalObject, success, fd, script_size);
         vm.drainMicrotasks();
     }
     vm.promiseTimer->runRunLoop();
@@ -3134,62 +3317,18 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
 
     result = success && (asyncTestExpectedPasses == asyncTestPasses) ? 0 : 3;
 
-    if (options.m_exitCode) {
-        printf("jsc exiting %d", result);
-        if (asyncTestExpectedPasses != asyncTestPasses)
-            printf(" because expected: %d async test passes but got: %d async test passes", asyncTestExpectedPasses, asyncTestPasses);
-        printf("\n");
-    }
-
-    if (options.m_profile) {
-        JSLockHolder locker(vm);
-        if (!vm.m_perBytecodeProfiler->save(options.m_profilerOutput.utf8().data()))
-            fprintf(stderr, "could not save profiler output.\n");
-    }
-
-#if ENABLE(JIT)
-    {
-        JSLockHolder locker(vm);
-        if (Options::useExceptionFuzz())
-            printf("JSC EXCEPTION FUZZ: encountered %u checks.\n", numberOfExceptionFuzzChecks());
-        bool fireAtEnabled =
-        Options::fireExecutableAllocationFuzzAt() || Options::fireExecutableAllocationFuzzAtOrAfter();
-        if (Options::useExecutableAllocationFuzz() && (!fireAtEnabled || Options::verboseExecutableAllocationFuzz()))
-            printf("JSC EXECUTABLE ALLOCATION FUZZ: encountered %u checks.\n", numberOfExecutableAllocationFuzzChecks());
-        if (Options::useOSRExitFuzz()) {
-            printf("JSC OSR EXIT FUZZ: encountered %u static checks.\n", numberOfStaticOSRExitFuzzChecks());
-            printf("JSC OSR EXIT FUZZ: encountered %u dynamic checks.\n", numberOfOSRExitFuzzChecks());
-        }
-
-        
-        auto compileTimeStats = JIT::compileTimeStats();
-        Vector<CString> compileTimeKeys;
-        for (auto& entry : compileTimeStats)
-            compileTimeKeys.append(entry.key);
-        std::sort(compileTimeKeys.begin(), compileTimeKeys.end());
-        for (const CString& key : compileTimeKeys)
-            printf("%40s: %.3lf ms\n", key.data(), compileTimeStats.get(key).milliseconds());
-
-        if (Options::reportTotalPhaseTimes())
-            logTotalPhaseTimes();
-    }
-#endif
-
     if (Options::gcAtEnd()) {
         // We need to hold the API lock to do a GC.
         JSLockHolder locker(&vm);
         vm.heap.collectNow(Sync, CollectionScope::Full);
     }
 
-    if (options.m_dumpSamplingProfilerData) {
-#if ENABLE(SAMPLING_PROFILER)
-        JSLockHolder locker(&vm);
-        vm.samplingProfiler()->reportTopFunctions();
-        vm.samplingProfiler()->reportTopBytecodes();
-#else
-        dataLog("Sampling profiler is not enabled on this platform\n");
-#endif
+    if (reprl_mode) {
+        int status = result << 8;
+        CHECK(write(REPRL_CWFD, &status, 4) == 4);
+        __sanitizer_cov_reset_edgeguards();
     }
+    } while (reprl_mode);
 
     vm.codeCache()->write(vm);
 
@@ -3271,12 +3410,12 @@ int jscmain(int argc, char** argv)
 
     int result = runJSC(
         options, false,
-        [&] (VM& vm, GlobalObject* globalObject, bool& success) {
+        [&] (VM& vm, GlobalObject* globalObject, bool& success, int fd, size_t size) {
             UNUSED_PARAM(vm);
 #if PLATFORM(COCOA)
             vm.setOnEachMicrotaskTick(WTFMove(onEachMicrotaskTick));
 #endif
-            runWithOptions(globalObject, options, success);
+            runWithOptions(globalObject, options, success, fd, size);
         });
 
     printSuperSamplerState();
